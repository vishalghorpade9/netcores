<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RabbitMQ.Client</name>
    </assembly>
    <members>
        <member name="T:RabbitMQ.Client.AmqpTcpEndpoint">
            <summary>
            Represents a TCP-addressable AMQP peer: a host name and port number.
            </summary>
            <remarks>
            <para>
            Some of the constructors take, as a convenience, a <see cref="T:System.Uri"/>
            instance representing an AMQP server address. The use of Uri
            here is not standardised - Uri is simply a convenient
            container for internet-address-like components. In particular,
            the Uri "Scheme" property is ignored: only the "Host" and
            "Port" properties are extracted.
            </para>
            </remarks>
        </member>
        <member name="F:RabbitMQ.Client.AmqpTcpEndpoint.DefaultAmqpSslPort">
            <summary>
            Default Amqp ssl port.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.AmqpTcpEndpoint.UseDefaultPort">
            <summary>
            Indicates that the default port for the protocol should be used.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.AmqpTcpEndpoint.#ctor(System.String,System.Int32,RabbitMQ.Client.SslOption,System.UInt32)">
            <summary>
            Creates a new instance of the <see cref="T:RabbitMQ.Client.AmqpTcpEndpoint"/>.
            </summary>
            <param name="hostName">Hostname.</param>
            <param name="portOrMinusOne"> Port number. If the port number is -1, the default port number will be used.</param>
            <param name="ssl">Ssl option.</param>
            <param name="maxInboundMessageBodySize">Maximum message size from RabbitMQ.</param>
        </member>
        <member name="M:RabbitMQ.Client.AmqpTcpEndpoint.#ctor(System.String,System.Int32,RabbitMQ.Client.SslOption)">
            <summary>
            Creates a new instance of the <see cref="T:RabbitMQ.Client.AmqpTcpEndpoint"/>.
            </summary>
            <param name="hostName">Hostname.</param>
            <param name="portOrMinusOne"> Port number. If the port number is -1, the default port number will be used.</param>
            <param name="ssl">Ssl option.</param>
        </member>
        <member name="M:RabbitMQ.Client.AmqpTcpEndpoint.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:RabbitMQ.Client.AmqpTcpEndpoint"/>.
            </summary>
            <param name="hostName">Hostname.</param>
            <param name="portOrMinusOne"> Port number. If the port number is -1, the default port number will be used.</param>
        </member>
        <member name="M:RabbitMQ.Client.AmqpTcpEndpoint.#ctor">
            <summary>
            Construct an AmqpTcpEndpoint with "localhost" as the hostname, and using the default port.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.AmqpTcpEndpoint.#ctor(System.Uri,RabbitMQ.Client.SslOption)">
            <summary>
            Creates a new instance of the <see cref="T:RabbitMQ.Client.AmqpTcpEndpoint"/> with the given Uri and ssl options.
            </summary>
            <remarks>
            Please see the class overview documentation for information about the Uri format in use.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.AmqpTcpEndpoint.#ctor(System.Uri)">
            <summary>
            Creates a new instance of the <see cref="T:RabbitMQ.Client.AmqpTcpEndpoint"/> with the given Uri.
            </summary>
            <remarks>
            Please see the class overview documentation for information about the Uri format in use.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.AmqpTcpEndpoint.Clone">
            <summary>
            Clones the endpoint.
            </summary>
            <returns>A copy with the same hostname, port, and TLS settings</returns>
        </member>
        <member name="M:RabbitMQ.Client.AmqpTcpEndpoint.CloneWithHostname(System.String)">
            <summary>
            Clones the endpoint using the provided hostname.
            </summary>
            <param name="hostname">Hostname to use</param>
            <returns>A copy with the provided hostname and port/TLS settings of this endpoint</returns>
        </member>
        <member name="P:RabbitMQ.Client.AmqpTcpEndpoint.HostName">
            <summary>
            Retrieve or set the hostname of this <see cref="T:RabbitMQ.Client.AmqpTcpEndpoint"/>.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.AmqpTcpEndpoint.Port">
             <summary>Retrieve or set the port number of this
            AmqpTcpEndpoint. A port number of -1 causes the default
            port number.</summary>
        </member>
        <member name="P:RabbitMQ.Client.AmqpTcpEndpoint.Protocol">
            <summary>
            Retrieve IProtocol of this <see cref="T:RabbitMQ.Client.AmqpTcpEndpoint"/>.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.AmqpTcpEndpoint.AddressFamily">
            <summary>
            Used to force the address family of the endpoint.
            Use <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> to force to IPv4.
            Use <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> to force to IPv6.
            Or use <see cref="F:System.Net.Sockets.AddressFamily.Unknown" /> to attempt both IPv6 and IPv4.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.AmqpTcpEndpoint.Ssl">
            <summary>
            Retrieve the TLS options for this AmqpTcpEndpoint. If not set, null is returned.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.AmqpTcpEndpoint.MaxInboundMessageBodySize">
            <summary>
            Get the maximum size for a message in bytes. 
            The default value is defined in <see cref="F:RabbitMQ.Client.ConnectionFactory.DefaultMaxInboundMessageBodySize"/>. 
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.AmqpTcpEndpoint.Parse(System.String)">
            <summary>
            Construct an instance from a protocol and an address in "hostname:port" format.
            </summary>
            <remarks>
            If the address string passed in contains ":", it is split
            into a hostname and a port-number part. Otherwise, the
            entire string is used as the hostname, and the port-number
            is set to -1 (meaning the default number for the protocol
            variant specified).
            Hostnames provided as IPv6 must appear in square brackets ([]).
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.AmqpTcpEndpoint.ParseMultiple(System.String)">
            <summary>
            Splits the passed-in string on ",", and passes the substrings to <see cref="M:RabbitMQ.Client.AmqpTcpEndpoint.Parse(System.String)"/>.
            </summary>
            <remarks>
            Accepts a string of the form "hostname:port,
            hostname:port, ...", where the ":port" pieces are
            optional, and returns a corresponding array of <see cref="T:RabbitMQ.Client.AmqpTcpEndpoint"/>s.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.AmqpTcpEndpoint.Equals(System.Object)">
            <summary>
            Compares this instance by value (protocol, hostname, port) against another instance.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.AmqpTcpEndpoint.GetHashCode">
            <summary>
            Implementation of hash code depending on protocol, hostname and port,
            to line up with the implementation of <see cref="M:RabbitMQ.Client.AmqpTcpEndpoint.Equals(System.Object)"/>.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.AmqpTcpEndpoint.ToString">
            <summary>
            Returns a URI-like string of the form amqp-PROTOCOL://HOSTNAME:PORTNUMBER.
            </summary>
            <remarks>
            This method is intended mainly for debugging and logging use.
            </remarks>
        </member>
        <member name="T:RabbitMQ.Client.AmqpTimestamp">
            <summary>
            Structure holding an AMQP timestamp, a posix 64-bit time_t.</summary>
            <remarks>
            <para>
            When converting between an AmqpTimestamp and a System.DateTime,
            be aware of the effect of your local timezone. In particular,
            different versions of the .NET framework assume different
            defaults.
            </para>
            <para>
            We have chosen a signed 64-bit time_t here, since the AMQP
            specification through versions 0-9 is silent on whether
            timestamps are signed or unsigned.
            </para>
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.AmqpTimestamp.#ctor(System.Int64)">
            <summary>
            Construct an <see cref="T:RabbitMQ.Client.AmqpTimestamp"/>.
            </summary>
            <param name="unixTime">Unix time in seconds.</param>
        </member>
        <member name="F:RabbitMQ.Client.AmqpTimestamp.UnixTime">
            <summary>
            Unix time in seconds.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.AmqpTimestamp.ToString">
            <summary>
            Provides a debugger-friendly display.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.AsyncDefaultBasicConsumer.#ctor(RabbitMQ.Client.IChannel)">
            <summary>
            Constructor which sets the Channel property to the given value.
            </summary>
            <param name="channel">Common AMQP channel.</param>
        </member>
        <member name="P:RabbitMQ.Client.AsyncDefaultBasicConsumer.ConsumerTags">
            <summary>
            Retrieve the consumer tags this consumer is registered as; to be used when discussing this consumer
            with the server, for instance with <see cref="M:RabbitMQ.Client.IChannel.BasicCancelAsync(System.String,System.Boolean,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.AsyncDefaultBasicConsumer.IsRunning">
            <summary>
            Returns true while the consumer is registered and expecting deliveries from the broker.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.AsyncDefaultBasicConsumer.ShutdownReason">
            <summary>
            If our <see cref="T:RabbitMQ.Client.IChannel"/> shuts down, this property will contain a description of the reason for the
            shutdown. Otherwise it will contain null. See <see cref="T:RabbitMQ.Client.Events.ShutdownEventArgs"/>.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.AsyncDefaultBasicConsumer.Channel">
            <summary>
            Retrieve the <see cref="T:RabbitMQ.Client.IChannel"/> this consumer is associated with,
             for use in acknowledging received messages, for instance.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.AsyncDefaultBasicConsumer.HandleBasicCancelAsync(System.String,System.Threading.CancellationToken)">
            <summary>
             Called when the consumer is cancelled for reasons other than by a basicCancel:
             e.g. the queue has been deleted (either by this channel or  by any other channel).
             See <see cref="M:RabbitMQ.Client.AsyncDefaultBasicConsumer.HandleBasicCancelOkAsync(System.String,System.Threading.CancellationToken)"/> for notification of consumer cancellation due to basicCancel
            </summary>
            <param name="consumerTag">Consumer tag this consumer is registered.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:RabbitMQ.Client.AsyncDefaultBasicConsumer.HandleBasicCancelOkAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Called upon successful deregistration of the consumer from the broker.
            </summary>
            <param name="consumerTag">Consumer tag this consumer is registered.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:RabbitMQ.Client.AsyncDefaultBasicConsumer.HandleBasicConsumeOkAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Called upon successful registration of the consumer with the broker.
            </summary>
            <param name="consumerTag">Consumer tag this consumer is registered.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:RabbitMQ.Client.AsyncDefaultBasicConsumer.HandleBasicDeliverAsync(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IReadOnlyBasicProperties,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Called each time a message is delivered for this consumer.
            </summary>
            <remarks>
            This is a no-op implementation. It will not acknowledge deliveries via <see cref="M:RabbitMQ.Client.IChannel.BasicAckAsync(System.UInt64,System.Boolean,System.Threading.CancellationToken)"/>
            if consuming in automatic acknowledgement mode.
            Subclasses must copy or fully use delivery body before returning.
            Accessing the body at a later point is unsafe as its memory can
            be already released.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.AsyncDefaultBasicConsumer.HandleChannelShutdownAsync(System.Object,RabbitMQ.Client.Events.ShutdownEventArgs)">
            <summary>
            Called when the channel (channel) this consumer was registered on terminates.
            </summary>
            <param name="channel">A channel this consumer was registered on.</param>
            <param name="reason">Shutdown context.</param>
        </member>
        <member name="M:RabbitMQ.Client.AsyncDefaultBasicConsumer.OnCancelAsync(System.String[],System.Threading.CancellationToken)">
            <summary>
            Default implementation - overridable in subclasses.</summary>
            <param name="consumerTags">The set of consumer tags that were cancelled</param>
            <param name="cancellationToken">The cancellation token.</param>
            <remarks>
            This default implementation simply sets the <see cref="P:RabbitMQ.Client.AsyncDefaultBasicConsumer.IsRunning"/> property to false, and takes no further action.
            </remarks>
        </member>
        <member name="T:RabbitMQ.Client.BasicGetResult">
            <summary>Represents Basic.GetOk responses from the server.</summary>
            <remarks>
            Basic.Get either returns an instance of this class, or null if a Basic.GetEmpty was received.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.BasicGetResult.#ctor(System.UInt64,System.Boolean,System.String,System.String,System.UInt32,RabbitMQ.Client.IReadOnlyBasicProperties,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Sets the new instance's properties from the arguments passed in.
            </summary>
            <param name="deliveryTag">Delivery tag for the message.</param>
            <param name="redelivered">Redelivered flag for the message</param>
            <param name="exchange">The exchange this message was published to.</param>
            <param name="routingKey">Routing key with which the message was published.</param>
            <param name="messageCount">The number of messages pending on the queue, excluding the message being delivered.</param>
            <param name="basicProperties">The Basic-class content header properties for the message.</param>
            <param name="body">The body</param>
        </member>
        <member name="F:RabbitMQ.Client.BasicGetResult.BasicProperties">
            <summary>
            Retrieves the Basic-class content header properties for this message.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.BasicGetResult.Body">
            <summary>
            Retrieves the body of this message.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.BasicGetResult.DeliveryTag">
            <summary>
            Retrieve the delivery tag for this message. See also <see cref="M:RabbitMQ.Client.IChannel.BasicAckAsync(System.UInt64,System.Boolean,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.BasicGetResult.Exchange">
            <summary>
            Retrieve the exchange this message was published to.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.BasicGetResult.MessageCount">
            <summary>
            Retrieve the number of messages pending on the queue, excluding the message being delivered.
            </summary>
            <remarks>
            Note that this figure is indicative, not reliable, and can
            change arbitrarily as messages are added to the queue and removed by other clients.
            </remarks>
        </member>
        <member name="F:RabbitMQ.Client.BasicGetResult.Redelivered">
            <summary>
            Retrieve the redelivered flag for this message.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.BasicGetResult.RoutingKey">
            <summary>
            Retrieve the routing key with which this message was published.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.BasicProperties">
            <summary>
            AMQP specification content header properties for content class "basic".
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.BinaryTableValue">
             <summary>Wrapper for a byte[]. May appear as values read from
            and written to AMQP field tables.</summary>
             <remarks>
             <para>
             The sole reason for the existence of this class is to permit
             encoding of byte[] as 'x' in AMQP field tables, an extension
             to the specification that is part of the tentative JMS mapping
             implemented by QPid.
             </para>
             <para>
             Instances of this object may be found as values held in
             IDictionary instances returned from
             RabbitMQ.Client.Impl.WireFormatting.ReadTable, e.g. as part of
             IBasicProperties.Headers tables. Likewise, instances may be
             set as values in an IDictionary table to be encoded by
             RabbitMQ.Client.Impl.WireFormatting.WriteTable.
             </para>
             <para>
             When an instance of this class is encoded/decoded, the type
             tag 'x' is used in the on-the-wire representation. The AMQP
             standard type tag 'S' is decoded to a raw byte[], and a raw
             byte[] is encoded as 'S'. Instances of System.String are
             converted to a UTF-8 binary representation, and then encoded
             using tag 'S'. In order to force the use of tag 'x', instances
             of this class must be used.
             </para>
             </remarks>
        </member>
        <member name="M:RabbitMQ.Client.BinaryTableValue.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:RabbitMQ.Client.BinaryTableValue"/> with an empty array for its Bytes property.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.BinaryTableValue.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:RabbitMQ.Client.BinaryTableValue"/>.
            </summary>
            <param name="bytes">The wrapped byte array, as decoded or as to be encoded.</param>
        </member>
        <member name="P:RabbitMQ.Client.BinaryTableValue.Bytes">
            <summary>
            The wrapped byte array, as decoded or as to be encoded.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.CachedString">
            <summary>
            Caches a string's byte representation to be used for certain methods like IChannel.BasicPublish/>.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.CachedString.Value">
            <summary>
            The string value to cache.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.CachedString.Bytes">
            <summary>
            Gets the bytes representing the <see cref="F:RabbitMQ.Client.CachedString.Value"/>.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.CachedString.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:RabbitMQ.Client.CachedString"/> based on the provided string.
            </summary>
            <param name="value">The string to cache.</param>
        </member>
        <member name="M:RabbitMQ.Client.CachedString.#ctor(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Creates a new <see cref="T:RabbitMQ.Client.CachedString"/> based on the provided bytes.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:RabbitMQ.Client.CachedString.#ctor(System.String,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Creates a new <see cref="T:RabbitMQ.Client.CachedString"/> based on the provided values.
            </summary>
            <param name="value">The string to cache.</param>
            <param name="bytes">The byte representation of the string value.</param>
        </member>
        <member name="T:RabbitMQ.Client.ConnectionConfig">
            <summary>
            The configuration of a connection.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionConfig.VirtualHost">
            <summary>
            Virtual host to access during this connection.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionConfig.UserName">
            <summary>
            Username to use when authenticating to the server.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionConfig.Password">
            <summary>
            Password to use when authenticating to the server.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionConfig.CredentialsProvider">
            <summary>
            Default ICredentialsProvider implementation. If set, this
            overrides UserName / Password
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionConfig.AuthMechanisms">
            <summary>
             SASL auth mechanisms to use.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionConfig.ClientProperties">
            <summary>
            Dictionary of client properties to be sent to the server.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionConfig.ClientProvidedName">
            <summary>
            Default client provided name to be used for connections.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionConfig.MaxChannelCount">
            <summary>
            Maximum channel number to ask for.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionConfig.MaxFrameSize">
            <summary>
            Frame-max parameter to ask for (in bytes).
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionConfig.MaxInboundMessageBodySize">
            <summary>
            Maximum body size of a message (in bytes).
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionConfig.TopologyRecoveryEnabled">
            <summary>
            Set to false to make automatic connection recovery not recover topology (exchanges, queues, bindings, etc).
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionConfig.TopologyRecoveryFilter">
            <summary>
            Filter to include/exclude entities from topology recovery.
            Default filter includes all entities in topology recovery.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionConfig.TopologyRecoveryExceptionHandler">
            <summary>
            Custom logic for handling topology recovery exceptions that match the specified filters.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionConfig.NetworkRecoveryInterval">
            <summary>
            Amount of time client will wait for before re-trying  to recover connection.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionConfig.HeartbeatInterval">
            <summary>
            Heartbeat timeout to use when negotiating with the server.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionConfig.ContinuationTimeout">
            <summary>
            Amount of time protocol operations (e.g. <code>queue.declare</code>) are allowed to take before timing out.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionConfig.HandshakeContinuationTimeout">
            <summary>
            Amount of time protocol handshake operations are allowed to take before timing out.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionConfig.RequestedConnectionTimeout">
            <summary>
            Timeout setting for connection attempts.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionConfig.ConsumerDispatchConcurrency">
            <summary>
            Set to a value greater than one to enable concurrent processing. For a concurrency greater than one <see cref="T:RabbitMQ.Client.IAsyncBasicConsumer"/>
            will be offloaded to the worker thread pool so it is important to choose the value for the concurrency wisely to avoid thread pool overloading.
            <see cref="T:RabbitMQ.Client.IAsyncBasicConsumer"/> can handle concurrency much more efficiently due to the non-blocking nature of the consumer.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.ConnectionFactory">
             <summary>Main entry point to the RabbitMQ .NET AMQP client
            API. Constructs <see cref="T:RabbitMQ.Client.IConnection"/> instances.</summary>
             <remarks>
             <para>
             A simple example of connecting to a broker:
             </para>
             <example><code>
                 ConnectionFactory factory = new ConnectionFactory();
                 //
                 // The next five lines are optional:
                 factory.UserName = ConnectionFactory.DefaultUser;
                 factory.Password = ConnectionFactory.DefaultPass;
                 factory.VirtualHost = ConnectionFactory.DefaultVHost;
                 factory.HostName = hostName;
                 factory.Port     = AmqpTcpEndpoint.UseDefaultPort;
                 factory.MaxInboundMessageBodySize = 512 * 1024 * 1024;
                 //
                 IConnection conn = factory.CreateConnection();
                 //
                 IChannel ch = conn.CreateChannel();
                 //
                 // ... use ch's IChannel methods ...
                 //
                 ch.Close(Constants.ReplySuccess, "Closing the channel");
                 conn.Close(Constants.ReplySuccess, "Closing the connection");
             </code></example>
             <para>
            The same example, written more compactly with AMQP URIs:
             </para>
             <example><code>
                 ConnectionFactory factory = new ConnectionFactory();
                 factory.Uri = new Uri("amqp://localhost");
                 IConnection conn = factory.CreateConnection();
                 ...
             </code></example>
             <para>
             Please see also the API overview and tutorial in the User Guide.
             </para>
             <para>
            Note that the Uri property takes a string representation of an
            AMQP URI.  Omitted URI parts will take default values.  The
            host part of the URI cannot be omitted and URIs of the form
            "amqp://foo/" (note the trailing slash) also represent the
            default virtual host.  The latter issue means that virtual
            hosts with an empty name are not addressable. </para></remarks>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionFactory.DefaultChannelMax">
            <summary>
            Default value for the desired maximum channel number. Default: 2047.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionFactory.DefaultConnectionTimeout">
            <summary>
            Default value for connection attempt timeout.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionFactory.DefaultFrameMax">
            <summary>
            Default value for the desired maximum frame size. Default is 0 ("no limit").
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionFactory.DefaultMaxInboundMessageBodySize">
            <summary>
            Default value for <code>ConnectionFactory</code>'s <code>MaxInboundMessageBodySize</code>.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionFactory.DefaultHeartbeat">
            <summary>
            Default value for desired heartbeat interval. Default is 60 seconds,
            TimeSpan.Zero means "heartbeats are disabled".
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionFactory.DefaultPass">
            <summary>
            Default password (value: "guest").
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionFactory.DefaultUser">
            <summary>
            Default user name (value: "guest").
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionFactory.DefaultVHost">
            <summary>
            Default virtual host (value: "/").
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.DefaultAmqpUriSslProtocols">
            <summary>
            TLS versions enabled by default: TLSv1.2, v1.1, v1.0.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.AmqpUriSslProtocols">
            <summary>
            The AMQP URI SSL protocols.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionFactory.DefaultAuthMechanisms">
            <summary>
             Default SASL auth mechanisms to use.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.AuthMechanisms">
            <summary>
             SASL auth mechanisms to use.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.DefaultAddressFamily">
            <summary>
            Address family used by default.
            Use <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> to force to IPv4.
            Use <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> to force to IPv6.
            Or use <see cref="F:System.Net.Sockets.AddressFamily.Unknown" /> to attempt both IPv6 and IPv4.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.AutomaticRecoveryEnabled">
            <summary>
            Set to false to disable automatic connection recovery.
            Defaults to true.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.ConsumerDispatchConcurrency">
            <summary>
            Set to a value greater than one to enable concurrent processing. For a concurrency greater than one <see cref="T:RabbitMQ.Client.IAsyncBasicConsumer"/>
            will be offloaded to the worker thread pool so it is important to choose the value for the concurrency wisely to avoid thread pool overloading.
            <see cref="T:RabbitMQ.Client.IAsyncBasicConsumer"/> can handle concurrency much more efficiently due to the non-blocking nature of the consumer.
            Defaults to 1.
            </summary>
            <remarks>For concurrency greater than one this removes the guarantee that consumers handle messages in the order they receive them.
            In addition to that consumers need to be thread/concurrency safe.</remarks>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.HostName">
            <summary>The host to connect to.</summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.NetworkRecoveryInterval">
            <summary>
            Amount of time client will wait for before re-trying  to recover connection.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.HandshakeContinuationTimeout">
            <summary>
            Amount of time protocol handshake operations are allowed to take before
            timing out.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.ContinuationTimeout">
            <summary>
            Amount of time protocol operations (e.g. <code>queue.declare</code>) are allowed to take before
            timing out.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.EndpointResolverFactory">
            <summary>
            Factory function for creating the <see cref="T:RabbitMQ.Client.IEndpointResolver"/>
            used to generate a list of endpoints for the ConnectionFactory
            to try in order.
            The default value creates an instance of the <see cref="T:RabbitMQ.Client.DefaultEndpointResolver"/>
            using the list of endpoints passed in. The DefaultEndpointResolver shuffles the
            provided list each time it is requested.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.Port">
            <summary>
            The port to connect on. <see cref="F:RabbitMQ.Client.AmqpTcpEndpoint.UseDefaultPort"/>
             indicates the default for the protocol should be used.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.RequestedConnectionTimeout">
            <summary>
            Timeout setting for connection attempts.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.SocketReadTimeout">
            <summary>
            Timeout setting for socket read operations.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.SocketWriteTimeout">
            <summary>
            Timeout setting for socket write operations.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.Ssl">
            <summary>
            TLS options setting.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.TopologyRecoveryEnabled">
            <summary>
            Set to false to make automatic connection recovery not recover topology (exchanges, queues, bindings, etc).
            Defaults to true.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.TopologyRecoveryFilter">
            <summary>
            Filter to include/exclude entities from topology recovery.
            Default filter includes all entities in topology recovery.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.TopologyRecoveryExceptionHandler">
            <summary>
            Custom logic for handling topology recovery exceptions that match the specified filters.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.ConnectionFactory.#ctor">
            <summary>
            Construct a fresh instance, with all fields set to their respective defaults.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.Endpoint">
            <summary>
            Connection endpoint.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.ClientProperties">
            <summary>
            Dictionary of client properties to be sent to the server.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.UserName">
            <summary>
            Username to use when authenticating to the server.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.Password">
            <summary>
            Password to use when authenticating to the server.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.CredentialsProvider">
            <summary>
            ICredentialsProvider used to obtain username and password.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.RequestedChannelMax">
            <summary>
            Maximum channel number to ask for.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.RequestedFrameMax">
            <summary>
            Frame-max parameter to ask for (in bytes).
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.RequestedHeartbeat">
            <summary>
            Heartbeat timeout to use when negotiating with the server.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.VirtualHost">
            <summary>
            Virtual host to access during this connection.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.MaxInboundMessageBodySize">
            <summary>
            Maximum allowed message size, in bytes, from RabbitMQ.
            Corresponds to the <code>ConnectionFactory.DefaultMaxMessageSize</code> setting.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.Uri">
            <summary>
            The uri to use for the connection.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ConnectionFactory.ClientProvidedName">
            <summary>
            Default client provided name to be used for connections.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.ConnectionFactory.AuthMechanismFactory(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Given a list of mechanism names supported by the server, select a preferred mechanism,
             or null if we have none in common.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.ConnectionFactory.CreateConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously create a connection to one of the endpoints provided by the IEndpointResolver
            returned by the EndpointResolverFactory. By default the configured
            hostname and port are used.
            </summary>
            <param name="cancellationToken">Cancellation token for this connection</param>
            <exception cref="T:RabbitMQ.Client.Exceptions.BrokerUnreachableException">
            When the configured hostname was not reachable.
            </exception>
        </member>
        <member name="M:RabbitMQ.Client.ConnectionFactory.CreateConnectionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously create a connection to one of the endpoints provided by the IEndpointResolver
            returned by the EndpointResolverFactory. By default the configured
            hostname and port are used.
            </summary>
            <param name="clientProvidedName">
            Application-specific connection name, will be displayed in the management UI
            if RabbitMQ server supports it. This value doesn't have to be unique and cannot
            be used as a connection identifier, e.g. in HTTP API requests.
            This value is supposed to be human-readable.
            </param>
            <param name="cancellationToken">Cancellation token for this connection</param>
            <exception cref="T:RabbitMQ.Client.Exceptions.BrokerUnreachableException">
            When the configured hostname was not reachable.
            </exception>
        </member>
        <member name="M:RabbitMQ.Client.ConnectionFactory.CreateConnectionAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Asynchronously create a connection using a list of hostnames using the configured port.
            By default each hostname is tried in a random order until a successful connection is
            found or the list is exhausted using the DefaultEndpointResolver.
            The selection behaviour can be overridden by configuring the EndpointResolverFactory.
            </summary>
            <param name="hostnames">
            List of hostnames to use for the initial
            connection and recovery.
            </param>
            <param name="cancellationToken">Cancellation token for this connection</param>
            <returns>Open connection</returns>
            <exception cref="T:RabbitMQ.Client.Exceptions.BrokerUnreachableException">
            When no hostname was reachable.
            </exception>
        </member>
        <member name="M:RabbitMQ.Client.ConnectionFactory.CreateConnectionAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously create a connection using a list of hostnames using the configured port.
            By default each endpoint is tried in a random order until a successful connection is
            found or the list is exhausted.
            The selection behaviour can be overridden by configuring the EndpointResolverFactory.
            </summary>
            <param name="hostnames">
            List of hostnames to use for the initial
            connection and recovery.
            </param>
            <param name="clientProvidedName">
            Application-specific connection name, will be displayed in the management UI
            if RabbitMQ server supports it. This value doesn't have to be unique and cannot
            be used as a connection identifier, e.g. in HTTP API requests.
            This value is supposed to be human-readable.
            </param>
            <param name="cancellationToken">Cancellation token for this connection</param>
            <returns>Open connection</returns>
            <exception cref="T:RabbitMQ.Client.Exceptions.BrokerUnreachableException">
            When no hostname was reachable.
            </exception>
        </member>
        <member name="M:RabbitMQ.Client.ConnectionFactory.CreateConnectionAsync(System.Collections.Generic.IEnumerable{RabbitMQ.Client.AmqpTcpEndpoint},System.Threading.CancellationToken)">
            <summary>
            Asynchronously create a connection using a list of endpoints. By default each endpoint will be tried
            in a random order until a successful connection is found or the list is exhausted.
            The selection behaviour can be overridden by configuring the EndpointResolverFactory.
            </summary>
            <param name="endpoints">
            List of endpoints to use for the initial
            connection and recovery.
            </param>
            <param name="cancellationToken">Cancellation token for this connection</param>
            <returns>Open connection</returns>
            <exception cref="T:RabbitMQ.Client.Exceptions.BrokerUnreachableException">
            When no hostname was reachable.
            </exception>
        </member>
        <member name="M:RabbitMQ.Client.ConnectionFactory.CreateConnectionAsync(System.Collections.Generic.IEnumerable{RabbitMQ.Client.AmqpTcpEndpoint},System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously create a connection using a list of endpoints. By default each endpoint will be tried
            in a random order until a successful connection is found or the list is exhausted.
            The selection behaviour can be overridden by configuring the EndpointResolverFactory.
            </summary>
            <param name="endpoints">
            List of endpoints to use for the initial
            connection and recovery.
            </param>
            <param name="clientProvidedName">
            Application-specific connection name, will be displayed in the management UI
            if RabbitMQ server supports it. This value doesn't have to be unique and cannot
            be used as a connection identifier, e.g. in HTTP API requests.
            This value is supposed to be human-readable.
            </param>
            <param name="cancellationToken">Cancellation token for this connection</param>
            <returns>Open connection</returns>
            <exception cref="T:RabbitMQ.Client.Exceptions.BrokerUnreachableException">
            When no hostname was reachable.
            </exception>
        </member>
        <member name="M:RabbitMQ.Client.ConnectionFactory.CreateConnectionAsync(RabbitMQ.Client.IEndpointResolver,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously create a connection using an IEndpointResolver.
            </summary>
            <param name="endpointResolver">
            The endpointResolver that returns the endpoints to use for the connection attempt.
            </param>
            <param name="clientProvidedName">
            Application-specific connection name, will be displayed in the management UI
            if RabbitMQ server supports it. This value doesn't have to be unique and cannot
            be used as a connection identifier, e.g. in HTTP API requests.
            This value is supposed to be human-readable.
            </param>
            <param name="cancellationToken">Cancellation token for this connection</param>
            <returns>Open connection</returns>
            <exception cref="T:RabbitMQ.Client.Exceptions.BrokerUnreachableException">
            When no hostname was reachable.
            </exception>
        </member>
        <member name="M:RabbitMQ.Client.ConnectionFactory.UriDecode(System.String)">
            <summary>
             Unescape a string, protecting '+'.
             </summary>
        </member>
        <member name="F:RabbitMQ.Client.ConnectionFactoryBase.SocketFactory">
            <summary>
            Set custom socket options by providing a SocketFactory.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.ConnectionFactoryBase.DefaultSocketFactory(System.Net.Sockets.AddressFamily)">
            <summary>
            Creates a new instance of the <see cref="T:System.Net.Sockets.TcpClient"/>.
            </summary>
            <param name="addressFamily">Specifies the addressing scheme.</param>
            <returns>New instance of a <see cref="T:System.Net.Sockets.TcpClient"/>.</returns>
        </member>
        <member name="F:RabbitMQ.Client.Constants.FrameMethod">
            <summary>(= 1)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.FrameHeader">
            <summary>(= 2)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.FrameBody">
            <summary>(= 3)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.FrameHeartbeat">
            <summary>(= 8)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.FrameMinSize">
            <summary>(= 4096)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.FrameEnd">
            <summary>(= 206)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.ReplySuccess">
            <summary>(= 200)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.ContentTooLarge">
            <summary>(= 311)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.NoRoute">
            <summary>(= 312)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.NoConsumers">
            <summary>(= 313)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.ConnectionForced">
            <summary>(= 320)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.InvalidPath">
            <summary>(= 402)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.AccessRefused">
            <summary>(= 403)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.NotFound">
            <summary>(= 404)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.ResourceLocked">
            <summary>(= 405)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.PreconditionFailed">
            <summary>(= 406)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.FrameError">
            <summary>(= 501)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.SyntaxError">
            <summary>(= 502)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.CommandInvalid">
            <summary>(= 503)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.ChannelError">
            <summary>(= 504)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.UnexpectedFrame">
            <summary>(= 505)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.ResourceError">
            <summary>(= 506)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.NotAllowed">
            <summary>(= 530)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.NotImplemented">
            <summary>(= 540)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.InternalError">
            <summary>(= 541)</summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.DefaultConsumerDispatchConcurrency">
            <summary>
            The default consumer dispatch concurrency. See <see cref="P:RabbitMQ.Client.IConnectionFactory.ConsumerDispatchConcurrency"/>
            to set this value for every channel created on a connection,
            and <see cref="M:RabbitMQ.Client.IConnection.CreateChannelAsync(RabbitMQ.Client.CreateChannelOptions,System.Threading.CancellationToken)" />
            for setting this value for a particular channel.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.PublishSequenceNumberHeader">
            <summary>
            The message header used to track publish sequence numbers, to allow correlation when
            <c>basic.return</c> is sent via the broker.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.DefaultHandshakeContinuationTimeout">
            <summary>
            The default timeout for initial AMQP handshake
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Constants.DefaultContinuationTimeout">
            <summary>
            The default timeout for RPC methods
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.CreateChannelOptions">
            <summary>
            Channel creation options.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.CreateChannelOptions.PublisherConfirmationsEnabled">
             <summary>
             Enable or disable publisher confirmations on this channel. Defaults to <c>false</c>
            
             Note that, if this is enabled, and <see cref="F:RabbitMQ.Client.CreateChannelOptions.PublisherConfirmationTrackingEnabled"/> is <b>not</b>
             enabled, the broker may send a <c>basic.return</c> response if a message is published with <c>mandatory: true</c>
             and the broker can't route the message. This response will not, however, contain the publish sequence number
             for the message, so it is difficult to correlate the response to the correct message. Users of this library
             could add the <see cref="F:RabbitMQ.Client.Constants.PublishSequenceNumberHeader"/> header with the value returned by
             <see cref="M:RabbitMQ.Client.IChannel.GetNextPublishSequenceNumberAsync(System.Threading.CancellationToken)"/> to allow correlation
             of the response with the correct message.
             </summary>
        </member>
        <member name="F:RabbitMQ.Client.CreateChannelOptions.PublisherConfirmationTrackingEnabled">
             <summary>
             Should this library track publisher confirmations for you? Defaults to <c>false</c>
            
             When enabled, the <see cref="F:RabbitMQ.Client.Constants.PublishSequenceNumberHeader" /> header will be
             added to every published message, and will contain the message's publish sequence number.
             If the broker then sends a <c>basic.return</c> response for the message, this library can
             then correctly handle the message.
             </summary>
        </member>
        <member name="F:RabbitMQ.Client.CreateChannelOptions.OutstandingPublisherConfirmationsRateLimiter">
             <summary>
             If the publisher confirmation tracking is enabled, this represents the rate limiter used to
             throttle additional attempts to publish once the threshold is reached.
            
             Defaults to a <see cref="T:RabbitMQ.Client.ThrottlingRateLimiter"/> with a limit of 128 and a throttling percentage of 50% with a delay during throttling.
             </summary>
             <remarks>Setting the rate limiter to <c>null</c> disables the rate limiting entirely.</remarks>
        </member>
        <member name="F:RabbitMQ.Client.CreateChannelOptions.ConsumerDispatchConcurrency">
             <summary>
             Set to a value greater than one to enable concurrent processing. For a concurrency greater than one <see cref="T:RabbitMQ.Client.IAsyncBasicConsumer"/>
             will be offloaded to the worker thread pool so it is important to choose the value for the concurrency wisely to avoid thread pool overloading.
             <see cref="T:RabbitMQ.Client.IAsyncBasicConsumer"/> can handle concurrency much more efficiently due to the non-blocking nature of the consumer.
            
             Defaults to <c>null</c>, which will use the value from <see cref="P:RabbitMQ.Client.IConnectionFactory.ConsumerDispatchConcurrency"/>
            
             For concurrency greater than one this removes the guarantee that consumers handle messages in the order they receive them.
             In addition to that consumers need to be thread/concurrency safe.
             </summary>
        </member>
        <member name="T:RabbitMQ.Client.DeliveryModes">
            <summary>
            Convenience enum providing compile-time names for persistent modes.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.DeliveryModes.Transient">
            <summary>
            Value for transient delivery mode (not durable).
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.DeliveryModes.Persistent">
            <summary>
            Value for persistent delivery mode (durable).
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.AsyncEventArgs">
            <summary>
            Provides data for <see cref="T:RabbitMQ.Client.Events.AsyncEventHandler`1"/>
            events that can be invoked asynchronously.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.AsyncEventArgs.#ctor(System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:RabbitMQ.Client.Events.AsyncEventArgs"/>
            class.
            </summary>
            <param name="cancellationToken">
            A cancellation token related to the original operation that raised
            the event.  It's important for your handler to pass this token
            along to any asynchronous or long-running synchronous operations
            that take a token so cancellation will correctly propagate.  The
            default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
        </member>
        <member name="P:RabbitMQ.Client.Events.AsyncEventArgs.CancellationToken">
            <summary>
            Gets a cancellation token related to the original operation that
            raised the event.  It's important for your handler to pass this
            token along to any asynchronous or long-running synchronous
            operations that take a token so cancellation (via something like
            <code>
            new CancellationTokenSource(TimeSpan.FromSeconds(10)).Token
            </code>
            for example) will correctly propagate.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.AsyncEventArgs.Empty">
            <summary>
            Provides a value to use with events that do not have event data.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.AsyncEventingBasicConsumer.#ctor(RabbitMQ.Client.IChannel)">
            <summary>Constructor which sets the Channel property to the given value.</summary>
        </member>
        <member name="E:RabbitMQ.Client.Events.AsyncEventingBasicConsumer.ReceivedAsync">
            <summary>
             Event fired when a delivery arrives for the consumer.
             </summary>
             <remarks>
             Handlers must copy or fully use delivery body before returning.
             Accessing the body at a later point is unsafe as its memory can
             be already released.
             </remarks>
        </member>
        <member name="E:RabbitMQ.Client.Events.AsyncEventingBasicConsumer.RegisteredAsync">
            <summary>Fires when the server confirms successful consumer registration.</summary>
        </member>
        <member name="E:RabbitMQ.Client.Events.AsyncEventingBasicConsumer.ShutdownAsync">
            <summary>Fires on channel shutdown, both client and server initiated.</summary>
        </member>
        <member name="E:RabbitMQ.Client.Events.AsyncEventingBasicConsumer.UnregisteredAsync">
            <summary>Fires when the server confirms successful consumer cancellation.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.AsyncEventingBasicConsumer.OnCancelAsync(System.String[],System.Threading.CancellationToken)">
            <summary>Fires when the server confirms successful consumer cancellation.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.AsyncEventingBasicConsumer.HandleBasicConsumeOkAsync(System.String,System.Threading.CancellationToken)">
            <summary>Fires when the server confirms successful consumer registration.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.AsyncEventingBasicConsumer.HandleBasicDeliverAsync(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IReadOnlyBasicProperties,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>Fires the Received event.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.AsyncEventingBasicConsumer.HandleChannelShutdownAsync(System.Object,RabbitMQ.Client.Events.ShutdownEventArgs)">
            <summary>Fires the Shutdown event.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.BasicAckEventArgs">
            <summary>Contains all the information about a message acknowledged
            from an AMQP broker within the Basic content-class.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.BasicAckEventArgs.DeliveryTag">
            <summary>The sequence number of the acknowledged message, or
            the closed upper bound of acknowledged messages if multiple
            is true.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.BasicAckEventArgs.Multiple">
            <summary>Whether this acknowledgement applies to one message
            or multiple messages.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.BasicDeliverEventArgs">
            <summary>Contains all the information about a message delivered
            from an AMQP broker within the Basic content-class.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.BasicDeliverEventArgs.#ctor(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IReadOnlyBasicProperties,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>Constructor that fills the event's properties from
            its arguments.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.BasicDeliverEventArgs.BasicProperties">
            <summary>The content header of the message.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.BasicDeliverEventArgs.Body">
            <summary>
             <para>
               The message body as a sequence of bytes.
             </para>
             <para>
               NOTE: Using this memory outside of
               <c><seealso cref="E:RabbitMQ.Client.Events.AsyncEventingBasicConsumer.ReceivedAsync"/></c>
               requires that it be copied!
               <example>
               This shows how to copy the data for use:
               <code>
               byte[] bodyCopy = eventArgs.Body.ToArray();
               // bodyCopy is now safe to use elsewhere
               </code>
               </example>
             </para>
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.BasicDeliverEventArgs.ConsumerTag">
            <summary>The consumer tag of the consumer that the message
            was delivered to.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.BasicDeliverEventArgs.DeliveryTag">
            <summary>The delivery tag for this delivery. See
            IChannel.BasicAck.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.BasicDeliverEventArgs.Exchange">
            <summary>The exchange the message was originally published
            to.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.BasicDeliverEventArgs.Redelivered">
            <summary>The AMQP "redelivered" flag.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.BasicDeliverEventArgs.RoutingKey">
            <summary>The routing key used when the message was
            originally published.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.BasicNackEventArgs">
            <summary>Contains all the information about a message nack'd
            from an AMQP broker within the Basic content-class.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.BasicNackEventArgs.DeliveryTag">
            <summary>The sequence number of the nack'd message, or the
            closed upper bound of nack'd messages if multiple is
            true.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.BasicNackEventArgs.Multiple">
            <summary>Whether this nack applies to one message or
            multiple messages.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.BasicNackEventArgs.Requeue">
            <summary>Ignore</summary>
            <remarks>Clients should ignore this field.</remarks>
        </member>
        <member name="T:RabbitMQ.Client.Events.BasicReturnEventArgs">
            <summary>Contains all the information about a message returned
            from an AMQP broker within the Basic content-class.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.BasicReturnEventArgs.BasicProperties">
            <summary>The content header of the message.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.BasicReturnEventArgs.Body">
            <summary>The message body.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.BasicReturnEventArgs.Exchange">
            <summary>The exchange the returned message was originally
            published to.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.BasicReturnEventArgs.ReplyCode">
            <summary>The AMQP reason code for the return. See
            RabbitMQ.Client.Framing.*.Constants.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.BasicReturnEventArgs.ReplyText">
            <summary>Human-readable text from the broker describing the
            reason for the return.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.BasicReturnEventArgs.RoutingKey">
            <summary>The routing key used when the message was
            originally published.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.BaseExceptionEventArgs.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Exception,System.Threading.CancellationToken)">
            <summary>Wrap an exception thrown by a callback.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.BaseExceptionEventArgs.Detail">
            <summary>Access helpful information about the context in
            which the wrapped exception was thrown.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.BaseExceptionEventArgs.Exception">
            <summary>Access the wrapped exception.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.CallbackExceptionEventArgs">
            <summary>Describes an exception that was thrown during the
            library's invocation of an application-supplied callback
            handler.</summary>
            <remarks>
            <para>
             When an exception is thrown from a callback registered with
             part of the RabbitMQ .NET client library, it is caught,
             packaged into a CallbackExceptionEventArgs, and passed through
             the appropriate IChannel's or IConnection's CallbackException
             event handlers. If an exception is thrown in a
             CallbackException handler, it is silently swallowed, as
             CallbackException is the last chance to handle these kinds of
             exception.
            </para>
            <para>
             Code constructing CallbackExceptionEventArgs instances will
             usually place helpful information about the context of the
             call in the IDictionary available through the Detail property.
            </para>
            </remarks>
        </member>
        <member name="T:RabbitMQ.Client.Events.ConnectionBlockedEventArgs">
            <summary>
            Event relating to connection being blocked.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.ConnectionBlockedEventArgs.Reason">
            <summary>
            Access the reason why connection is blocked.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.ConsumerEventArgs">
            <summary>Event relating to a successful consumer registration
            or cancellation.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.ConsumerEventArgs.#ctor(System.String[],System.Threading.CancellationToken)">
            <summary>Construct an event containing the consumer-tags of
            the consumer the event relates to.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.ConsumerEventArgs.ConsumerTags">
            <summary>Access the consumer-tags of the consumer the event
            relates to.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.ConsumerTagChangedAfterRecoveryEventArgs.#ctor(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:RabbitMQ.Client.Events.ConsumerTagChangedAfterRecoveryEventArgs"/> class.
            </summary>
            <param name="tagBefore">The tag before.</param>
            <param name="tagAfter">The tag after.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="F:RabbitMQ.Client.Events.ConsumerTagChangedAfterRecoveryEventArgs.TagBefore">
            <summary>
            Gets the tag before.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.ConsumerTagChangedAfterRecoveryEventArgs.TagAfter">
            <summary>
            Gets the tag after.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.FlowControlEventArgs">
            <summary>
            Event relating to flow control.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.FlowControlEventArgs.Active">
            <summary>
            Access the flow control setting.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.QueueNameChangedAfterRecoveryEventArgs.#ctor(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:RabbitMQ.Client.Events.QueueNameChangedAfterRecoveryEventArgs"/> class.
            </summary>
            <param name="nameBefore">The name before.</param>
            <param name="nameAfter">The name after.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="F:RabbitMQ.Client.Events.QueueNameChangedAfterRecoveryEventArgs.NameBefore">
            <summary>
            Gets the name before.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Events.QueueNameChangedAfterRecoveryEventArgs.NameAfter">
            <summary>
            Gets the name after.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.RecoveringConsumerEventArgs">
            <summary>
            Event related to consumer recovery, during automatic recovery.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.RecoveringConsumerEventArgs.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Constructs an event containing the consumer arguments and consumer
            tag of the consumer this event relates to.
            </summary>
            <param name="consumerTag">Consumer arguments of the consumer for this event</param>
            <param name="consumerArguments">Consumer tag of the consumer for this event</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="P:RabbitMQ.Client.Events.RecoveringConsumerEventArgs.ConsumerTag">
            <summary>
            Access the consumer arguments of the consumer this event relates to.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.RecoveringConsumerEventArgs.ConsumerArguments">
            <summary>
            Access the consumer tag of the consumer this event relates to.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.Events.ShutdownEventArgs">
            <summary>
            Information about the reason why a particular channel, session, or connection was destroyed.
            </summary>
            <remarks>
            The <see cref="P:RabbitMQ.Client.Events.ShutdownEventArgs.ClassId"/> and <see cref="P:RabbitMQ.Client.Events.ShutdownEventArgs.Initiator"/> properties should be used to determine the originator of the shutdown event.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.Events.ShutdownEventArgs.#ctor(RabbitMQ.Client.ShutdownInitiator,System.UInt16,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Construct a <see cref="T:RabbitMQ.Client.Events.ShutdownEventArgs"/> with the given parameters and
             0 for <see cref="P:RabbitMQ.Client.Events.ShutdownEventArgs.ClassId"/> and <see cref="P:RabbitMQ.Client.Events.ShutdownEventArgs.MethodId"/>.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.ShutdownEventArgs.#ctor(RabbitMQ.Client.ShutdownInitiator,System.UInt16,System.String,System.UInt16,System.UInt16,System.Object,System.Threading.CancellationToken)">
            <summary>
            Construct a <see cref="T:RabbitMQ.Client.Events.ShutdownEventArgs"/> with the given parameters.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.ShutdownEventArgs.#ctor(RabbitMQ.Client.ShutdownInitiator,System.UInt16,System.String,System.Exception,System.Threading.CancellationToken)">
            <summary>
            Construct a <see cref="T:RabbitMQ.Client.Events.ShutdownEventArgs"/> with the given parameters.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.ShutdownEventArgs.Exception">
            <summary>
            Exception causing the shutdown, or null if none.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.ShutdownEventArgs.Cause">
            <summary>
            Object causing the shutdown, or null if none.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.ShutdownEventArgs.ClassId">
            <summary>
            AMQP content-class ID, or 0 if none.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.ShutdownEventArgs.Initiator">
            <summary>
            Returns the source of the shutdown event: either the application, the library, or the remote peer.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.ShutdownEventArgs.MethodId">
            <summary>
            AMQP method ID within a content-class, or 0 if none.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.ShutdownEventArgs.ReplyCode">
            <summary>
            One of the standardised AMQP reason codes. See RabbitMQ.Client.Framing.*.Constants.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Events.ShutdownEventArgs.ReplyText">
            <summary>
            Informative human-readable reason text.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.ShutdownEventArgs.ToString">
            <summary>
            Override ToString to be useful for debugging.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.Events.ShutdownEventArgs.GetLogMessage">
            <summary>
            Gets a message suitable for logging.
            </summary>
            <remarks>
            This leaves out the full exception ToString since logging will include it separately.
            </remarks>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.AlreadyClosedException">
            <summary>Thrown when the application tries to make use of a
            session or connection that has already been shut
            down.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.AlreadyClosedException.#ctor(RabbitMQ.Client.Events.ShutdownEventArgs)">
            <summary>Construct an instance containing the given
            shutdown reason.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.AuthenticationFailureException">
            <summary> Thrown when the cause is  an
            authentication failure. </summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.BrokerUnreachableException">
            <summary>Thrown when no connection could be opened during a
            ConnectionFactory.CreateConnection attempt.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.BrokerUnreachableException.#ctor(System.Exception)">
            <summary>Construct a BrokerUnreachableException. The inner exception is
            an AggregateException holding the errors from multiple connection attempts.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.ChannelAllocationException">
            <summary> Thrown when a SessionManager cannot allocate a new
            channel number, or the requested channel number is already in
            use. </summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.ChannelAllocationException.#ctor">
            <summary>
            Indicates that there are no more free channels.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.ChannelAllocationException.#ctor(System.Int32)">
            <summary>
            Indicates that the specified channel is in use
            </summary>
            <param name="channel">The requested channel number</param>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.ChannelAllocationException.Channel">
            <summary>Retrieves the channel number concerned; will
            return -1 in the case where "no more free channels" is
            being signaled, or a non-negative integer when "channel is
            in use" is being signaled.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.ConnectFailureException">
            <summary>Thrown when a connection to the broker fails</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.HardProtocolException">
            <summary>Subclass of ProtocolException representing problems
            requiring a connection.close.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.MalformedFrameException">
            <summary>Thrown when frame parsing code detects an error in the
            wire-protocol encoding of a frame.</summary>
            <remarks>
            For example, potential MalformedFrameException conditions
            include frames too short, frames missing their end marker, and
            invalid protocol negotiation headers.
            </remarks>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.OperationInterruptedException">
            <summary>
            Thrown when a session is destroyed during an RPC call to a
            broker. For example, if a TCP connection dropping causes the
            destruction of a session in the middle of a QueueDeclare
            operation, an OperationInterruptedException will be thrown to
            the caller of IChannel.QueueDeclare.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.OperationInterruptedException.#ctor">
            <summary>
            Construct an OperationInterruptedException
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.OperationInterruptedException.#ctor(RabbitMQ.Client.Events.ShutdownEventArgs)">
            <summary>
            Construct an OperationInterruptedException with
            the passed-in explanation, if any.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.OperationInterruptedException.#ctor(RabbitMQ.Client.Events.ShutdownEventArgs,System.String)">
            <summary>Construct an OperationInterruptedException with
            the passed-in explanation and prefix, if any.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.OperationInterruptedException.ShutdownReason">
            <summary>Retrieves the explanation for the shutdown. May
            return null if no explanation is available.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.PacketNotRecognizedException">
            <summary>Thrown to indicate that the peer didn't understand
            the packet received from the client. Peer sent default message
            describing protocol version it is using and transport parameters.
            </summary>
            <remarks>
            The peer's {'A','M','Q','P',txHi,txLo,major,minor} packet is
            decoded into instances of this class.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.PacketNotRecognizedException.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Fills the new instance's properties with the values passed in.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.PacketNotRecognizedException.ServerMajor">
            <summary>The peer's AMQP specification major version.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.PacketNotRecognizedException.ServerMinor">
            <summary>The peer's AMQP specification minor version.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.PacketNotRecognizedException.TransportHigh">
            <summary>The peer's high transport byte.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.PacketNotRecognizedException.TransportLow">
            <summary>The peer's low transport byte.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.PossibleAuthenticationFailureException">
            <summary> Thrown when the likely cause is  an
            authentication failure. </summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.ProtocolException">
            <summary> Instances of subclasses of subclasses
            HardProtocolException and SoftProtocolException are thrown in
            situations when we detect a problem with the connection-,
            channel- or wire-level parts of the AMQP protocol. </summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.ProtocolException.ReplyCode">
            <summary>Retrieve the reply code to use in a
            connection/channel close method.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.ProtocolException.ShutdownReason">
            <summary>Retrieve the shutdown details to use in a
            connection/channel close method. Defaults to using
            ShutdownInitiator.Library, and this.ReplyCode and
            this.Message as the reply code and text,
            respectively.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.ProtocolVersionMismatchException">
            <summary>Thrown to indicate that the peer does not support the
            wire protocol version we requested immediately after opening
            the TCP socket.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.ProtocolVersionMismatchException.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Fills the new instance's properties with the values passed in.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.ProtocolVersionMismatchException.ClientMajor">
            <summary>The client's AMQP specification major version.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.ProtocolVersionMismatchException.ClientMinor">
            <summary>The client's AMQP specification minor version.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.ProtocolVersionMismatchException.ServerMajor">
            <summary>The peer's AMQP specification major version.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.ProtocolVersionMismatchException.ServerMinor">
            <summary>The peer's AMQP specification minor version.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.PublishException">
            <summary>
            Class for exceptions related to publisher confirmations
            or the <c>mandatory</c> flag.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.PublishException.IsReturn">
            <summary>
            <c>true</c> if this exception is due to a <c>basic.return</c>
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.PublishException.PublishSequenceNumber">
            <summary>
            Retrieve the publish sequence number.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.RabbitMQClientException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:RabbitMQ.Client.Exceptions.RabbitMQClientException" /> class.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.RabbitMQClientException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:RabbitMQ.Client.Exceptions.RabbitMQClientException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.RabbitMQClientException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:RabbitMQ.Client.Exceptions.RabbitMQClientException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.SyntaxErrorException">
            <summary> Thrown when our peer sends a frame that contains
            illegal values for one or more fields. </summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.UnexpectedFrameException">
            <summary>
            Thrown when the connection receives a frame that it wasn't expecting.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.UnexpectedMethodException">
            <summary>
            Thrown when the channel receives an RPC reply that it wasn't expecting.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.UnexpectedMethodException.ProtocolClassId">
            <summary>
            Retrieves the class ID number of this method, as defined in the AMQP specification XML.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.UnexpectedMethodException.ProtocolMethodId">
            <summary>
            Retrieves the method ID number of this method, as defined in the AMQP specification XML.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.UnexpectedMethodException.ProtocolMethodName">
            <summary>
            Retrieves the name of this method - for debugging use.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.UnexpectedMethodException.ExpectedProtocolClassId">
            <summary>
            Retrieves the expected class ID number of this method, as defined in the AMQP specification XML.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.UnexpectedMethodException.ExpectedProtocolMethodId">
            <summary>
            Retrieves the expected method ID number of this method, as defined in the AMQP specification XML.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.UnexpectedMethodException.ExpectedProtocolMethodName">
            <summary>
            Retrieves the expected name of this method - for debugging use.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.UnknownClassOrMethodException">
            <summary>
            Thrown when the protocol handlers detect an unknown class
            number or method number.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.UnknownClassOrMethodException.ClassId">
            <summary>The AMQP content-class ID.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.UnknownClassOrMethodException.MethodId">
            <summary>The AMQP method ID within the content-class, or 0 if none.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Exceptions.WireFormattingException">
            <summary> Thrown when the wire-formatting code cannot encode a
            particular .NET value to AMQP protocol format.  </summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.WireFormattingException.#ctor(System.String)">
            <summary>Construct a WireFormattingException with no
            particular offender (i.e. null)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Exceptions.WireFormattingException.#ctor(System.String,System.Object)">
            <summary>Construct a WireFormattingException with the given
            offender</summary>
        </member>
        <member name="P:RabbitMQ.Client.Exceptions.WireFormattingException.Offender">
            <summary>Object which this exception is complaining about;
            may be null if no particular offender exists</summary>
        </member>
        <member name="T:RabbitMQ.Client.ExchangeType">
            <summary>
            Convenience class providing compile-time names for standard exchange types.
            </summary>
            <remarks>
            Use the static members of this class as values for the
            "exchangeType" arguments for IChannel methods such as
            ExchangeDeclare. The broker may be extended with additional
            exchange types that do not appear in this class.
            </remarks>
        </member>
        <member name="F:RabbitMQ.Client.ExchangeType.Direct">
            <summary>
            Exchange type used for AMQP direct exchanges.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ExchangeType.Fanout">
            <summary>
            Exchange type used for AMQP fanout exchanges.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ExchangeType.Headers">
            <summary>
            Exchange type used for AMQP headers exchanges.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ExchangeType.Topic">
            <summary>
            Exchange type used for AMQP topic exchanges.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.ExchangeType.All">
            <summary>
            Retrieve a collection containing all standard exchange types.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.ExternalMechanism.HandleChallengeAsync(System.Byte[],RabbitMQ.Client.ConnectionConfig,System.Threading.CancellationToken)">
            <summary>
            Handle one round of challenge-response.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ExternalMechanismFactory.Name">
            <summary>
            The name of the authentication mechanism, as negotiated on the wire.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.ExternalMechanismFactory.GetInstance">
            <summary>
            Return a new authentication mechanism implementation.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.Framing.AmqpVersion">
            <summary>Represents a version of the AMQP specification.</summary>
            <remarks>
            <para>
            Vendor-specific variants of particular official specification
            versions exist: this class simply represents the AMQP
            specification version, and does not try to represent
            information about any custom variations involved.
            </para>
            <para>
            AMQP version 0-8 peers sometimes advertise themselves as
            version 8-0: for this reason, this class's constructor
            special-cases 8-0, rewriting it at construction time to be 0-8 instead.
            </para>
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.Framing.AmqpVersion.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct an <see cref="T:RabbitMQ.Client.Framing.AmqpVersion"/> from major and minor version numbers.
            </summary>
            <remarks>
            Converts major=8 and minor=0 into major=0 and minor=8. Please see the class comment.
            </remarks>
        </member>
        <member name="P:RabbitMQ.Client.Framing.AmqpVersion.Major">
            <summary>
            The AMQP specification major version number.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.AmqpVersion.Minor">
            <summary>
            The AMQP specification minor version number.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.AmqpVersion.Equals(System.Object)">
            <summary>
            Implement value-equality comparison.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.AmqpVersion.GetHashCode">
            <summary>
            Implement hashing as for value-equality.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.AmqpVersion.ToString">
            <summary>
            Format appropriately for display.
            </summary>
            <remarks>
            The specification currently uses "MAJOR-MINOR" as a display format.
            </remarks>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Protocol.MajorVersion">
            <summary>Protocol major version (= 0)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Protocol.MinorVersion">
            <summary>Protocol minor version (= 9)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Protocol.Revision">
            <summary>Protocol revision (= 1)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Protocol.ApiName">
            <summary>Protocol API name (= :AMQP_0_9_1)</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Protocol.DefaultPort">
            <summary>Default TCP port (= 5672)</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.AutorecoveringConnection.UpdateSecretAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>API-side invocation of updating the secret.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.AutorecoveringConnection.CloseAsync(System.UInt16,System.String,System.TimeSpan,System.Boolean,System.Threading.CancellationToken)">
            <summary>Asynchronous API-side invocation of connection.close with timeout.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.AutorecoveringConnection.StopRecoveryLoopAsync(System.Threading.CancellationToken)">
            <summary>
            Async cancels the main recovery loop and will block until the loop finishes, or the timeout
            expires, to prevent CloseAsync operations overlapping with recovery operations.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Connection.RabbitMQ#Client#IConnection#Protocol">
            <summary>Explicit implementation of IConnection.Protocol.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Connection.Protocol">
            <summary>Another overload of a Protocol property, useful
            for exposing a tighter type.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Connection.FrameHandler">
            <summary>Used for testing only.</summary>
        </member>
        <member name="E:RabbitMQ.Client.Framing.Connection.RecoverySucceededAsync">
            <summary>
            This event is never fired by non-recovering connections but it is a part of the <see cref="T:RabbitMQ.Client.IConnection"/> interface.
            </summary>
        </member>
        <member name="E:RabbitMQ.Client.Framing.Connection.ConnectionRecoveryErrorAsync">
            <summary>
            This event is never fired by non-recovering connections but it is a part of the <see cref="T:RabbitMQ.Client.IConnection"/> interface.
            </summary>
        </member>
        <member name="E:RabbitMQ.Client.Framing.Connection.ConsumerTagChangeAfterRecoveryAsync">
            <summary>
            This event is never fired by non-recovering connections but it is a part of the <see cref="T:RabbitMQ.Client.IConnection"/> interface.
            </summary>
        </member>
        <member name="E:RabbitMQ.Client.Framing.Connection.QueueNameChangedAfterRecoveryAsync">
            <summary>
            This event is never fired by non-recovering connections but it is a part of the <see cref="T:RabbitMQ.Client.IConnection"/> interface.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Framing.Connection.MaxPayloadSize">
            <summary>
            The maximum payload size for this connection.
            </summary>
            <remarks>Compared to <see cref="P:RabbitMQ.Client.Framing.Connection.FrameMax"/> unlimited, unlimited means here <see cref="F:System.Int32.MaxValue"/>.
            Also it is reduced by the required framing bytes as in <see cref="F:RabbitMQ.Client.Impl.Framing.BaseFrameSize"/>.</remarks>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Connection.CloseAsync(System.UInt16,System.String,System.TimeSpan,System.Boolean,System.Threading.CancellationToken)">
            <summary>Asynchronous API-side invocation of connection.close with timeout.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Connection.CloseAsync(RabbitMQ.Client.Events.ShutdownEventArgs,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Asychronously try to close connection in a graceful way</summary>
            <remarks>
            <para>
            Shutdown reason contains code and text assigned when closing the connection,
            as well as the information about what initiated the close
            </para>
            <para>
            Abort flag, if true, signals to close the ongoing connection immediately
            and do not report any errors if it was already closed.
            </para>
            <para>
            Timeout determines how much time internal close operations should be given
            to complete.
            </para>
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Connection.OnShutdownAsync(RabbitMQ.Client.Events.ShutdownEventArgs)">
            <summary>Broadcasts notification of the final shutdown of the connection.</summary>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Connection.MaybeTerminateMainloopAndStopHeartbeatTimers(System.Boolean)">
            <remarks>
             May be called more than once. Should therefore be idempotent.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.Framing.Connection.ClosingLoopAsync(System.Threading.CancellationToken)">
            <remarks>
             Loop only used while quiescing. Use only to cleanly close connection
            </remarks>
        </member>
        <member name="T:RabbitMQ.Client.Headers">
            <summary>
            Convenience class providing compile-time names for standard headers.
            </summary>
            <remarks>
            Use the static members of this class as headers for the
            arguments for Queue and Exchange declaration or Consumer creation. 
            The broker may be extended with additional
            headers that do not appear in this class.
            </remarks>
        </member>
        <member name="F:RabbitMQ.Client.Headers.XMaxPriority">
            <summary>
            x-max-priority header
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Headers.XMaxLength">
            <summary>
            x-max-length header
            The max total size in bytes
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Headers.XMaxLengthInBytes">
            <summary>
            x-max-length-bytes header
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Headers.XDeadLetterExchange">
            <summary>
            x-dead-letter-exchange header
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Headers.XDeadLetterRoutingKey">
            <summary>
            x-dead-letter-routing-key header
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Headers.XMessageTTL">
            <summary>
            x-message-ttl header
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Headers.XExpires">
            <summary>
            x-expires header
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Headers.AlternateExchange">
            <summary>
            alternate-exchange header
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Headers.XPriority">
            <summary>
            x-priority header
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Headers.XQueueMode">
            <summary>
            x-queue-mode header.
            Available modes: "default" and "lazy"
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Headers.XQueueType">
            <summary>
            x-queue-type header.
            Available types: "quorum" and "classic"(default) and "stream"
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Headers.XQuorumInitialGroupSize">
            <summary>
            x-quorum-initial-group-size header.
            Use to control the number of quorum queue members
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Headers.XSingleActiveConsumer">
            <summary>
            x-single-active-consumer header.
            Available modes: true and false(default).
            Allows to have only one consumer at a time consuming from a queue
            and to fail over to another registered consumer in case the active one is cancelled or dies
             </summary>
        </member>
        <member name="F:RabbitMQ.Client.Headers.XOverflow">
            <summary>
            x-overflow header.
            Available strategies: "reject-publish" and "drop-head"(default).
            Allows to configure strategy when <see cref="F:RabbitMQ.Client.Headers.XMaxLength"/> or <see cref="F:RabbitMQ.Client.Headers.XMaxLengthInBytes"/> hits limits
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Headers.XMaxAge">
            <summary>
            x-max-age header
            Sets the maximum age of the stream. Default: not set.
            valid units: Y, M, D, h, m, s
            e.g. 7D for a week
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Headers.XStreamMaxSegmentSizeInBytes">
            <summary>
            x-stream-max-segment-size-bytes header
            A stream is divided up into fixed size segment files on disk.
            This setting controls the size of these. Default: (500000000 bytes).
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Headers.XStreamOffset">
            <summary>
            x-stream-offset header.
            As streams never delete any messages, any consumer can start reading/consuming from any point in the log.
            this is controlled by the x-stream-offset consumer argument.
            Available values: "first", "last", "next", Timestamp and Interval (valid units: Y, M, D, h, m, s)
            <see href="https://www.rabbitmq.com/streams.html#consuming">See more</see>
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.IAmqpHeader">
            <summary>
            A AMQP header.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IAmqpHeader.ProtocolClassId">
            <summary>
            The protocol class id.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.IAmqpWriteable">
            <summary>
            A AMQP writeable.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IAmqpWriteable.GetRequiredBufferSize">
            <summary>
            Gets the minimum required buffer size.
            </summary>
            <returns>The minimum required buffer size.</returns>
        </member>
        <member name="M:RabbitMQ.Client.IAmqpWriteable.WriteTo(System.Span{System.Byte})">
            <summary>
            Write this instance to the provided span.
            </summary>
            <param name="span">The span to write it to.</param>
            <returns>The amount of bytes written.</returns>
        </member>
        <member name="T:RabbitMQ.Client.IAsyncBasicConsumer">
            <summary>
            Consumer interface. Used to receive messages from a queue by subscription.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IAsyncBasicConsumer.Channel">
            <summary>
            Retrieve the <see cref="T:RabbitMQ.Client.IChannel"/> this consumer is associated with,
            for use in acknowledging received messages, for instance.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IAsyncBasicConsumer.HandleBasicCancelAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Called when the consumer is cancelled for reasons other than by a basicCancel:
            e.g. the queue has been deleted (either by this channel or by any other channel).
            See <see cref="M:RabbitMQ.Client.IAsyncBasicConsumer.HandleBasicCancelOkAsync(System.String,System.Threading.CancellationToken)"/> for notification of consumer cancellation due to basicCancel
            </summary>
            <param name="consumerTag">Consumer tag this consumer is registered.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:RabbitMQ.Client.IAsyncBasicConsumer.HandleBasicCancelOkAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Called upon successful deregistration of the consumer from the broker.
            </summary>
            <param name="consumerTag">Consumer tag this consumer is registered.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:RabbitMQ.Client.IAsyncBasicConsumer.HandleBasicConsumeOkAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Called upon successful registration of the consumer with the broker.
            </summary>
            <param name="consumerTag">Consumer tag this consumer is registered.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:RabbitMQ.Client.IAsyncBasicConsumer.HandleBasicDeliverAsync(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IReadOnlyBasicProperties,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
             <summary>
             Called each time a message arrives for this consumer.
             <remarks>
              <para>
               Does nothing with the passed in information.
               Note that in particular, some delivered messages may require acknowledgement via <see cref="M:RabbitMQ.Client.IChannel.BasicAckAsync(System.UInt64,System.Boolean,System.Threading.CancellationToken)"/>.
               The implementation of this method in this class does NOT acknowledge such messages.
              </para>
              <para>
                NOTE: Using the <c>body</c> outside of
                <c><seealso cref="M:RabbitMQ.Client.IAsyncBasicConsumer.HandleBasicDeliverAsync(System.String,System.UInt64,System.Boolean,System.String,System.String,RabbitMQ.Client.IReadOnlyBasicProperties,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"/></c>
                requires that it be copied!
              </para>
             </remarks>
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IAsyncBasicConsumer.HandleChannelShutdownAsync(System.Object,RabbitMQ.Client.Events.ShutdownEventArgs)">
            <summary>
            Called when the channel shuts down.
            </summary>
            <param name="channel">Common AMQP channel.</param>
            <param name="reason">Information about the reason why a particular channel, session, or connection was destroyed.</param>
        </member>
        <member name="T:RabbitMQ.Client.IAuthMechanism">
            <summary>
            A pluggable authentication mechanism.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IAuthMechanism.HandleChallengeAsync(System.Byte[],RabbitMQ.Client.ConnectionConfig,System.Threading.CancellationToken)">
            <summary>
            Handle one round of challenge-response.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IAuthMechanismFactory.Name">
            <summary>
            The name of the authentication mechanism, as negotiated on the wire.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IAuthMechanismFactory.GetInstance">
            <summary>
            Return a new authentication mechanism implementation.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.IReadOnlyBasicProperties">
            <summary>
            The AMQP Basic headers class interface,
            spanning the union of the functionality offered by versions
            0-8, 0-8qpid, 0-9 and 0-9-1 of AMQP.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IReadOnlyBasicProperties.AppId">
            <summary>
            Application Id.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IReadOnlyBasicProperties.ClusterId">
            <summary>
            Intra-cluster routing identifier (cluster id is deprecated in AMQP 0-9-1).
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IReadOnlyBasicProperties.ContentEncoding">
            <summary>
            MIME content encoding.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IReadOnlyBasicProperties.ContentType">
            <summary>
            MIME content type.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IReadOnlyBasicProperties.CorrelationId">
            <summary>
            Application correlation identifier.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IReadOnlyBasicProperties.DeliveryMode">
            <summary>
            Non-persistent (1) or persistent (2).
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IReadOnlyBasicProperties.Expiration">
            <summary>
            Message expiration specification.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IReadOnlyBasicProperties.Headers">
            <summary>
            Message header field table. Is of type <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IReadOnlyBasicProperties.MessageId">
            <summary>
            Application message Id.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IReadOnlyBasicProperties.Persistent">
            <summary>
            Sets <see cref="P:RabbitMQ.Client.IReadOnlyBasicProperties.DeliveryMode"/> to either persistent (2) or non-persistent (1).
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IReadOnlyBasicProperties.Priority">
            <summary>
            Message priority, 0 to 9.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IReadOnlyBasicProperties.ReplyTo">
            <summary>
            Destination to reply to.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IReadOnlyBasicProperties.ReplyToAddress">
            <summary>
            Convenience property; parses <see cref="P:RabbitMQ.Client.IReadOnlyBasicProperties.ReplyTo"/> property using <see cref="M:RabbitMQ.Client.PublicationAddress.TryParse(System.String,RabbitMQ.Client.PublicationAddress@)"/>,
            and serializes it using <see cref="M:RabbitMQ.Client.PublicationAddress.ToString"/>.
            Returns null if <see cref="P:RabbitMQ.Client.IReadOnlyBasicProperties.ReplyTo"/> property cannot be parsed by <see cref="M:RabbitMQ.Client.PublicationAddress.TryParse(System.String,RabbitMQ.Client.PublicationAddress@)"/>.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IReadOnlyBasicProperties.Timestamp">
            <summary>
            Message timestamp.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IReadOnlyBasicProperties.Type">
            <summary>
            Message type name.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IReadOnlyBasicProperties.UserId">
            <summary>
            User Id.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IReadOnlyBasicProperties.IsAppIdPresent">
            <summary>
            Returns true if the <see cref="P:RabbitMQ.Client.IReadOnlyBasicProperties.AppId"/> property is present.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IReadOnlyBasicProperties.IsClusterIdPresent">
            <summary>
            Returns true if the <see cref="P:RabbitMQ.Client.IReadOnlyBasicProperties.ClusterId"/> property is present (cluster id is deprecated in AMQP 0-9-1).
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IReadOnlyBasicProperties.IsContentEncodingPresent">
            <summary>
            Returns true if the <see cref="P:RabbitMQ.Client.IReadOnlyBasicProperties.ContentEncoding"/> property is present.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IReadOnlyBasicProperties.IsContentTypePresent">
            <summary>
            Returns true if the <see cref="P:RabbitMQ.Client.IReadOnlyBasicProperties.ContentType"/> property is present.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IReadOnlyBasicProperties.IsCorrelationIdPresent">
            <summary>
            Returns true if the <see cref="P:RabbitMQ.Client.IReadOnlyBasicProperties.CorrelationId"/> property is present.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IReadOnlyBasicProperties.IsDeliveryModePresent">
            <summary>
            Returns true if the <see cref="P:RabbitMQ.Client.IReadOnlyBasicProperties.DeliveryMode"/> property is present.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IReadOnlyBasicProperties.IsExpirationPresent">
            <summary>
            Returns true if the <see cref="P:RabbitMQ.Client.IReadOnlyBasicProperties.Expiration"/> property is present.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IReadOnlyBasicProperties.IsHeadersPresent">
            <summary>
            Returns true if the <see cref="P:RabbitMQ.Client.IReadOnlyBasicProperties.Headers"/> property is present.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IReadOnlyBasicProperties.IsMessageIdPresent">
            <summary>
            Returns true if the <see cref="P:RabbitMQ.Client.IReadOnlyBasicProperties.MessageId"/> property is present.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IReadOnlyBasicProperties.IsPriorityPresent">
            <summary>
            Returns true if the <see cref="P:RabbitMQ.Client.IReadOnlyBasicProperties.Priority"/> property is present.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IReadOnlyBasicProperties.IsReplyToPresent">
            <summary>
            Returns true if the <see cref="P:RabbitMQ.Client.IReadOnlyBasicProperties.ReplyTo"/> property is present.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IReadOnlyBasicProperties.IsTimestampPresent">
            <summary>
            Returns true if the <see cref="P:RabbitMQ.Client.IReadOnlyBasicProperties.Timestamp"/> property is present.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IReadOnlyBasicProperties.IsTypePresent">
            <summary>
            Returns true if the <see cref="P:RabbitMQ.Client.IReadOnlyBasicProperties.Type"/> property is present.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IReadOnlyBasicProperties.IsUserIdPresent">
            <summary>
            Returns true if the <see cref="P:RabbitMQ.Client.IReadOnlyBasicProperties.UserId"/> property is present.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.IBasicProperties">
            <summary>
            The AMQP Basic headers class interface,
            spanning the union of the functionality offered by versions
            0-8, 0-8qpid, 0-9 and 0-9-1 of AMQP.
            </summary>
            <remarks>
            <para>
            Each property is readable, writable and clearable: a cleared
            property will not be transmitted over the wire. Properties on a
            fresh instance are clear by default.
            </para>
            </remarks>
        </member>
        <member name="P:RabbitMQ.Client.IBasicProperties.AppId">
            <summary>
            Application Id.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IBasicProperties.ClusterId">
            <summary>
            Intra-cluster routing identifier (cluster id is deprecated in AMQP 0-9-1).
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IBasicProperties.ContentEncoding">
            <summary>
            MIME content encoding.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IBasicProperties.ContentType">
            <summary>
            MIME content type.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IBasicProperties.CorrelationId">
            <summary>
            Application correlation identifier.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IBasicProperties.DeliveryMode">
            <summary>
            Non-persistent (1) or persistent (2).
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IBasicProperties.Expiration">
            <summary>
            Message expiration specification.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IBasicProperties.Headers">
            <summary>
            Message header field table. Is of type <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IBasicProperties.MessageId">
            <summary>
            Application message Id.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IBasicProperties.Persistent">
            <summary>
            Sets <see cref="P:RabbitMQ.Client.IBasicProperties.DeliveryMode"/> to either persistent (2) or non-persistent (1).
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IBasicProperties.Priority">
            <summary>
            Message priority, 0 to 9.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IBasicProperties.ReplyTo">
            <summary>
            Destination to reply to.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IBasicProperties.ReplyToAddress">
            <summary>
            Convenience property; parses <see cref="P:RabbitMQ.Client.IBasicProperties.ReplyTo"/> property using <see cref="M:RabbitMQ.Client.PublicationAddress.TryParse(System.String,RabbitMQ.Client.PublicationAddress@)"/>,
            and serializes it using <see cref="M:RabbitMQ.Client.PublicationAddress.ToString"/>.
            Returns null if <see cref="P:RabbitMQ.Client.IBasicProperties.ReplyTo"/> property cannot be parsed by <see cref="M:RabbitMQ.Client.PublicationAddress.TryParse(System.String,RabbitMQ.Client.PublicationAddress@)"/>.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IBasicProperties.Timestamp">
            <summary>
            Message timestamp.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IBasicProperties.Type">
            <summary>
            Message type name.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IBasicProperties.UserId">
            <summary>
            User Id.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IBasicProperties.ClearAppId">
            <summary>
            Clear the <see cref="P:RabbitMQ.Client.IBasicProperties.AppId"/> property.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IBasicProperties.ClearClusterId">
            <summary>
            Clear the <see cref="P:RabbitMQ.Client.IBasicProperties.ClusterId"/> property (cluster id is deprecated in AMQP 0-9-1).
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IBasicProperties.ClearContentEncoding">
            <summary>
            Clear the <see cref="P:RabbitMQ.Client.IBasicProperties.ContentEncoding"/> property.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IBasicProperties.ClearContentType">
            <summary>
            Clear the <see cref="P:RabbitMQ.Client.IBasicProperties.ContentType"/> property.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IBasicProperties.ClearCorrelationId">
            <summary>
            Clear the <see cref="P:RabbitMQ.Client.IBasicProperties.CorrelationId"/> property.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IBasicProperties.ClearDeliveryMode">
            <summary>
            Clear the <see cref="P:RabbitMQ.Client.IBasicProperties.DeliveryMode"/> property.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IBasicProperties.ClearExpiration">
            <summary>
            Clear the <see cref="P:RabbitMQ.Client.IBasicProperties.Expiration"/> property.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IBasicProperties.ClearHeaders">
            <summary>
            Clear the <see cref="P:RabbitMQ.Client.IBasicProperties.Headers"/> property.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IBasicProperties.ClearMessageId">
            <summary>
            Clear the <see cref="P:RabbitMQ.Client.IBasicProperties.MessageId"/> property.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IBasicProperties.ClearPriority">
            <summary>
            Clear the <see cref="P:RabbitMQ.Client.IBasicProperties.Priority"/> property.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IBasicProperties.ClearReplyTo">
            <summary>
            Clear the <see cref="P:RabbitMQ.Client.IBasicProperties.ReplyTo"/> property.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IBasicProperties.ClearTimestamp">
            <summary>
            Clear the <see cref="P:RabbitMQ.Client.IBasicProperties.Timestamp"/> property.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IBasicProperties.ClearType">
            <summary>
            Clear the <see cref="P:RabbitMQ.Client.IBasicProperties.Type"/> property.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IBasicProperties.ClearUserId">
            <summary>
            Clear the <see cref="P:RabbitMQ.Client.IBasicProperties.UserId"/> property.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.IChannel">
            <summary>
            Common AMQP model, spanning the union of the
            functionality offered by versions 0-8, 0-8qpid, 0-9 and 0-9-1 of AMQP.
            </summary>
            <remarks>
            Extends the <see cref="T:System.IDisposable"/> interface and the <see cref="T:System.IAsyncDisposable"/> interface, so that the "using"
            statement can be used to scope the lifetime of a channel when appropriate.
            </remarks>
        </member>
        <member name="P:RabbitMQ.Client.IChannel.ChannelNumber">
            <summary>
            Channel number, unique per connections.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IChannel.CloseReason">
            <summary>
            Returns null if the session is still in a state where it can be used,
            or the cause of its closure otherwise.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IChannel.DefaultConsumer">
             <summary>Signalled when an unexpected message is delivered.</summary>
            
             <remarks>
             Under certain circumstances it is possible for a channel to receive a
             message delivery which does not match any consumer which is currently
             set up via basicConsume(). This will occur after the following sequence
             of events:
            
             ctag = basicConsume(queue, consumer); // i.e. with explicit acks
             // some deliveries take place but are not acked
             basicCancel(ctag);
             basicRecover(false);
            
             Since requeue is specified to be false in the basicRecover, the spec
             states that the message must be redelivered to "the original recipient"
             - i.e. the same channel / consumer-tag. But the consumer is no longer
             active.
            
             In these circumstances, you can register a default consumer to handle
             such deliveries. If no default consumer is registered an
             InvalidOperationException will be thrown when such a delivery arrives.
            
             Most people will not need to use this.
             </remarks>
        </member>
        <member name="P:RabbitMQ.Client.IChannel.IsClosed">
            <summary>
            Returns true if the channel is no longer in a state where it can be used.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IChannel.IsOpen">
            <summary>
            Returns true if the channel is still in a state where it can be used.
            Identical to checking if <see cref="P:RabbitMQ.Client.IChannel.CloseReason"/> equals null.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IChannel.CurrentQueue">
            <summary>
            The name of the last queue declared on this channel.
            </summary>
            <remarks>
            https://www.rabbitmq.com/amqp-0-9-1-reference.html#domain.queue-name
            </remarks>
        </member>
        <member name="E:RabbitMQ.Client.IChannel.BasicAcksAsync">
            <summary>
            Signalled when a Basic.Ack command arrives from the broker.
            </summary>
        </member>
        <member name="E:RabbitMQ.Client.IChannel.BasicNacksAsync">
            <summary>
            Signalled when a Basic.Nack command arrives from the broker.
            </summary>
        </member>
        <member name="E:RabbitMQ.Client.IChannel.BasicReturnAsync">
            <summary>
            Signalled when a Basic.Return command arrives from the broker.
            </summary>
        </member>
        <member name="E:RabbitMQ.Client.IChannel.CallbackExceptionAsync">
             <summary>
             Signalled when an exception occurs in a callback invoked by the channel.
            
             Examples of cases where this event will be signalled
             include exceptions thrown in <see cref="T:RabbitMQ.Client.IAsyncBasicConsumer"/> methods, or
             exceptions thrown in <see cref="E:RabbitMQ.Client.IChannel.ChannelShutdownAsync"/> delegates etc.
             </summary>
        </member>
        <member name="E:RabbitMQ.Client.IChannel.ChannelShutdownAsync">
            <summary>
            Notifies the destruction of the channel.
            </summary>
            <remarks>
            If the channel is already destroyed at the time an event
            handler is added to this event, the event handler will be fired immediately.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.GetNextPublishSequenceNumberAsync(System.Threading.CancellationToken)">
            <summary>
            When in confirm mode, return the sequence number of the next message to be published.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.BasicAckAsync(System.UInt64,System.Boolean,System.Threading.CancellationToken)">
            <summary>Asynchronously acknknowledges one or more messages.</summary>
            <param name="deliveryTag">The delivery tag.</param>
            <param name="multiple">Ack all messages up to the delivery tag if set to <c>true</c>.</param>
            <param name="cancellationToken">Cancellation token for this operation.</param>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.BasicNackAsync(System.UInt64,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously nack one or more delivered message(s).
            </summary>
            <param name="deliveryTag">The delivery tag.</param>
            <param name="multiple">If set to <c>true</c>, nack all messages up to the current tag.</param>
            <param name="requeue">If set to <c>true</c>, requeue nack'd messages.</param>
            <param name="cancellationToken">Cancellation token for this operation.</param>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.BasicCancelAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>Asynchronously cancel a Basic content-class consumer.</summary>
            <param name="consumerTag">The consumer tag.</param>
            <param name="noWait">If set to <c>true</c>, do not require a response from the server.</param>
            <param name="cancellationToken">Cancellation token for this operation.</param>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.BasicConsumeAsync(System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object},RabbitMQ.Client.IAsyncBasicConsumer,System.Threading.CancellationToken)">
            <summary>Asynchronously start a Basic content-class consumer.</summary>
            <param name="queue">The queue.</param>
            <param name="autoAck">If set to <c>true</c>, automatically ack messages.</param>
            <param name="consumerTag">The consumer tag.</param>
            <param name="noLocal">If set to <c>true</c>, this consumer will not receive messages published by the same connection.</param>
            <param name="exclusive">If set to <c>true</c>, the consumer is exclusive.</param>
            <param name="arguments">Consumer arguments.</param>
            <param name="consumer">The consumer, an instance of <see cref="T:RabbitMQ.Client.IAsyncBasicConsumer"/></param>
            <param name="cancellationToken">Cancellation token for this operation.</param>
            <returns></returns>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.BasicGetAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieve an individual message, if
            one is available; returns null if the server answers that
            no messages are currently available. See also <see cref="M:RabbitMQ.Client.IChannel.BasicAckAsync(System.UInt64,System.Boolean,System.Threading.CancellationToken)" />.
            </summary>
            <param name="queue">The queue.</param>
            <param name="autoAck">If set to <c>true</c>, automatically ack the message.</param>
            <param name="cancellationToken">Cancellation token for this operation.</param>
            <returns><see cref="T:RabbitMQ.Client.BasicGetResult"/></returns>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.BasicPublishAsync``1(System.String,System.String,System.Boolean,``0,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously publishes a message.
            </summary>
            <param name="exchange">The exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="mandatory">If set to <c>true</c>, the message must route to a queue.</param>
            <param name="basicProperties">The message properties.</param>
            <param name="body">The message body.</param>
            <param name="cancellationToken">CancellationToken for this operation.</param>
            <remarks>
            Routing key must be shorter than 255 bytes.
            Throws <see cref="T:RabbitMQ.Client.Exceptions.PublishException"/> if a nack or basic.return is returned for the message.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.BasicPublishAsync``1(RabbitMQ.Client.CachedString,RabbitMQ.Client.CachedString,System.Boolean,``0,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously publishes a message.
            </summary>
            <param name="exchange">The exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="mandatory">If set to <c>true</c>, the message must route to a queue.</param>
            <param name="basicProperties">The message properties.</param>
            <param name="body">The message body.</param>
            <param name="cancellationToken">CancellationToken for this operation.</param>
            <remarks>
            Routing key must be shorter than 255 bytes.
            Throws <see cref="T:RabbitMQ.Client.Exceptions.PublishException"/> if a nack or basic.return is returned for the message.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.BasicQosAsync(System.UInt32,System.UInt16,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Configures QoS parameters of the Basic content-class.
            </summary>
            <param name="prefetchSize">Size of the prefetch in bytes.</param>
            <param name="prefetchCount">The prefetch count.</param>
            <param name="global">If set to <c>true</c>, use global prefetch.</param>
            <param name="cancellationToken">Cancellation token for this operation.</param>
            <remarks>See the <seealso href="https://www.rabbitmq.com/consumer-prefetch.html#overview">Consumer Prefetch documentation</seealso>.</remarks>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.BasicRejectAsync(System.UInt64,System.Boolean,System.Threading.CancellationToken)">
            <summary> Reject a delivered message.</summary>
            <param name="deliveryTag">The delivery tag.</param>
            <param name="requeue">If set to <c>true</c>, requeue rejected messages.</param>
            <param name="cancellationToken">CancellationToken for this operation.</param>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.CloseAsync(System.UInt16,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously close this session.
            </summary>
            <param name="replyCode">The reply code to send for closing (See under "Reply Codes" in the AMQP specification).</param>
            <param name="replyText">The reply text to send for closing.</param>
            <param name="abort">Whether or not the close is an abort (ignoring certain exceptions).</param>
            <param name="cancellationToken">CancellationToken for this operation.</param>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.CloseAsync(RabbitMQ.Client.Events.ShutdownEventArgs,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously close this session.
            </summary>
            <param name="reason">The <see cref="T:RabbitMQ.Client.Events.ShutdownEventArgs"/> instance containing the close data.</param>
            <param name="abort">Whether or not the close is an abort (ignoring certain exceptions).</param>
            <param name="cancellationToken">CancellationToken for this operation.</param>
            <returns></returns>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.ExchangeDeclareAsync(System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>Asynchronously declare an exchange.</summary>
            <param name="exchange">The name of the exchange.</param>
            <param name="type">The type of the exchange.</param>
            <param name="durable">Should this exchange survive a broker restart?</param>
            <param name="autoDelete">Should this exchange be auto-deleted?</param>
            <param name="arguments">The arguments.</param>
            <param name="passive">Optional; Set to <code>true</code> to passively declare the exchange (i.e. check for its existence)</param>
            <param name="noWait">If set to <c>true</c>, do not require a response from the server.</param>
            <param name="cancellationToken">CancellationToken for this operation.</param>
            <remarks>
            The exchange is declared non-internal.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.ExchangeDeclarePassiveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously do a passive exchange declaration.
            </summary>
            <param name="exchange">The name of the exchange.</param>
            <param name="cancellationToken">CancellationToken for this operation.</param>
            <remarks>
            This method performs a "passive declare" on an exchange,
            which checks whether an exchange exists.
            It will do nothing if the exchange already exists and result
            in a channel-level protocol exception (channel closure) if not.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.ExchangeDeleteAsync(System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously delete an exchange.
            </summary>
            <param name="exchange">The name of the exchange.</param>
            <param name="ifUnused">Only delete the exchange if it is unused.</param>
            <param name="noWait">If set to <c>true</c>, do not require a response from the server.</param>
            <param name="cancellationToken">CancellationToken for this operation.</param>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.ExchangeBindAsync(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously binds an exchange to an exchange.
            </summary>
            <param name="destination">The name of the destination exchange.</param>
            <param name="source">The name of the source exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="arguments">The binding arguments.</param>
            <param name="noWait">If set to <c>true</c>, do not require a response from the server.</param>
            <param name="cancellationToken">CancellationToken for this operation.</param>
            <remarks>
            Routing key must be shorter than 255 bytes.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.ExchangeUnbindAsync(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously unbind an exchange from an exchange.
            </summary>
            <param name="destination">The name of the destination exchange.</param>
            <param name="source">The name of the source exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="arguments">The binding arguments.</param>
            <param name="noWait">If set to <c>true</c>, do not require a response from the server.</param>
            <param name="cancellationToken">CancellationToken for this operation.</param>
            <remarks>
            Routing key must be shorter than 255 bytes.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.QueueDeclareAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously declares a queue. See the <a href="https://www.rabbitmq.com/queues.html">Queues guide</a> to learn more.
            </summary>
            <param name="queue">The name of the queue. Pass an empty string to make the server generate a name.</param>
            <param name="durable">Should this queue survive a broker restart?</param>
            <param name="exclusive">Should this queue use be limited to its declaring connection? Such a queue will be deleted when its declaring connection closes.</param>
            <param name="autoDelete">Should this queue be auto-deleted when its last consumer (if any) unsubscribes?</param>
            <param name="arguments">Optional; additional queue arguments, e.g. "x-queue-type"</param>
            <param name="passive">Optional; Set to <code>true</code> to passively declare the queue (i.e. check for its existence)</param>
            <param name="noWait">Optional; Set to <c>true</c> to not require a response from the server.</param>
            <param name="cancellationToken">CancellationToken for this operation.</param>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.QueueDeclarePassiveAsync(System.String,System.Threading.CancellationToken)">
             <summary>Asynchronously declare a queue passively.</summary>
             <param name="queue">The name of the queue. Pass an empty string to make the server generate a name.</param>
             <param name="cancellationToken">CancellationToken for this operation.</param>
             <remarks>
            The queue is declared passive, non-durable,
            non-exclusive, and non-autodelete, with no arguments.
            The queue is declared passively; i.e. only check if it exists.
             </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.QueueDeleteAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             Asynchronously deletes a queue. See the <a href="https://www.rabbitmq.com/queues.html">Queues guide</a> to learn more.
             </summary>
             <param name="queue">The name of the queue.</param>
             <param name="ifUnused">Only delete the queue if it is unused.</param>
             <param name="ifEmpty">Only delete the queue if it is empty.</param>
             <param name="noWait">If set to <c>true</c>, do not require a response from the server.</param>
             <param name="cancellationToken">CancellationToken for this operation.</param>
             <remarks>
            Returns the number of messages purged during queue deletion.
             </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.QueuePurgeAsync(System.String,System.Threading.CancellationToken)">
            <summary>Asynchronously purge a queue of messages.</summary>
            <param name="queue">The queue.</param>
            <param name="cancellationToken">CancellationToken for this operation.</param>
            <returns>Returns the number of messages purged.</returns>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.QueueBindAsync(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously bind a queue to an exchange.
            </summary>
            <param name="queue">The queue.</param>
            <param name="exchange">The exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="arguments">The arguments.</param>
            <param name="noWait">If set to <c>true</c>, do not require a response from the server.</param>
            <param name="cancellationToken">CancellationToken for this operation.</param>
            <remarks>
            Routing key must be shorter than 255 bytes.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.QueueUnbindAsync(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Asynchronously unbind a queue from an exchange.
            </summary>
            <param name="queue">The queue.</param>
            <param name="exchange">The exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="arguments">The arguments.</param>
            <param name="cancellationToken">CancellationToken for this operation.</param>
            <remarks>
            Routing key must be shorter than 255 bytes.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.MessageCountAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the number of messages in a queue ready to be delivered
            to consumers. This method assumes the queue exists. If it doesn't,
            an exception will be closed with an exception.
            </summary>
            <param name="queue">The name of the queue</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.ConsumerCountAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the number of consumers on a queue.
            This method assumes the queue exists. If it doesn't,
            an exception will be closed with an exception.
            </summary>
            <param name="queue">The name of the queue</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.TxCommitAsync(System.Threading.CancellationToken)">
            <summary>Asynchronously commit this session's active TX transaction.</summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.TxRollbackAsync(System.Threading.CancellationToken)">
            <summary>Asynchronously roll back this session's active TX transaction.</summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:RabbitMQ.Client.IChannel.TxSelectAsync(System.Threading.CancellationToken)">
            <summary>Asynchronously enable TX mode for this session.</summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="P:RabbitMQ.Client.IChannel.ContinuationTimeout">
            <summary>
            Amount of time protocol  operations (e.g. <code>queue.declare</code>) are allowed to take before
            timing out.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IChannelExtensions.BasicConsumeAsync(RabbitMQ.Client.IChannel,System.String,System.Boolean,RabbitMQ.Client.IAsyncBasicConsumer,System.Threading.CancellationToken)">
            <summary>Asynchronously start a Basic content-class consumer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.IChannelExtensions.BasicConsumeAsync(RabbitMQ.Client.IChannel,System.String,System.Boolean,System.String,RabbitMQ.Client.IAsyncBasicConsumer,System.Threading.CancellationToken)">
            <summary>Asynchronously start a Basic content-class consumer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.IChannelExtensions.BasicConsumeAsync(RabbitMQ.Client.IChannel,System.String,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},RabbitMQ.Client.IAsyncBasicConsumer,System.Threading.CancellationToken)">
            <summary>Asynchronously start a Basic content-class consumer.</summary>
        </member>
        <member name="M:RabbitMQ.Client.IChannelExtensions.BasicPublishAsync``1(RabbitMQ.Client.IChannel,RabbitMQ.Client.PublicationAddress,``0,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            (Extension method) Convenience overload of <see cref="M:RabbitMQ.Client.IChannel.BasicPublishAsync``1(System.String,System.String,System.Boolean,``0,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"/>
            </summary>
            <remarks>
            The publication occurs with mandatory=false.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IChannelExtensions.BasicPublishAsync(RabbitMQ.Client.IChannel,System.String,System.String,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            (Extension method) Convenience overload of <see cref="M:RabbitMQ.Client.IChannel.BasicPublishAsync``1(System.String,System.String,System.Boolean,``0,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"/>
            </summary>
            <remarks>
            The publication occurs with mandatory=false and empty BasicProperties
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IChannelExtensions.BasicPublishAsync(RabbitMQ.Client.IChannel,RabbitMQ.Client.CachedString,RabbitMQ.Client.CachedString,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            (Extension method) Convenience overload of <see cref="M:RabbitMQ.Client.IChannel.BasicPublishAsync``1(RabbitMQ.Client.CachedString,RabbitMQ.Client.CachedString,System.Boolean,``0,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" />
            </summary>
            <remarks>
            The publication occurs with mandatory=false and empty BasicProperties
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IChannelExtensions.BasicPublishAsync(RabbitMQ.Client.IChannel,System.String,System.String,System.Boolean,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            (Extension method) Convenience overload of <see cref="M:RabbitMQ.Client.IChannel.BasicPublishAsync``1(System.String,System.String,System.Boolean,``0,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"/>
            </summary>
            <remarks>
            The publication occurs with empty BasicProperties
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IChannelExtensions.BasicPublishAsync(RabbitMQ.Client.IChannel,RabbitMQ.Client.CachedString,RabbitMQ.Client.CachedString,System.Boolean,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            (Extension method) Convenience overload of <see cref="M:RabbitMQ.Client.IChannel.BasicPublishAsync``1(RabbitMQ.Client.CachedString,RabbitMQ.Client.CachedString,System.Boolean,``0,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" />
            </summary>
            <remarks>
            The publication occurs with empty BasicProperties
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IChannelExtensions.QueueDeclareAsync(RabbitMQ.Client.IChannel,System.String,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously declare a queue.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IChannelExtensions.ExchangeDeclareAsync(RabbitMQ.Client.IChannel,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously declare an exchange.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IChannelExtensions.QueueDeleteAsync(RabbitMQ.Client.IChannel,System.String,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes a queue.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IChannelExtensions.QueueUnbindAsync(RabbitMQ.Client.IChannel,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Asynchronously unbinds a queue.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IChannelExtensions.AbortAsync(RabbitMQ.Client.IChannel,System.Threading.CancellationToken)">
            <summary>
            Asynchronously abort this session.
            </summary>
            <remarks>
            If the session is already closed (or closing), then this
            method does nothing but wait for the in-progress close
            operation to complete. This method will not return to the
            caller until the shutdown is complete.
            In comparison to normal <see cref="M:RabbitMQ.Client.IChannelExtensions.CloseAsync(RabbitMQ.Client.IChannel,System.Threading.CancellationToken)"/> method, <see cref="M:RabbitMQ.Client.IChannelExtensions.AbortAsync(RabbitMQ.Client.IChannel,System.Threading.CancellationToken)"/> will not throw
            <see cref="T:RabbitMQ.Client.Exceptions.AlreadyClosedException"/> or <see cref="T:System.IO.IOException"/> or any other <see cref="T:System.Exception"/> during closing channel.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IChannelExtensions.CloseAsync(RabbitMQ.Client.IChannel,System.Threading.CancellationToken)">
            <summary>Asynchronously close this session.</summary>
            <remarks>
            If the session is already closed (or closing), then this
            method does nothing but wait for the in-progress close
            operation to complete. This method will not return to the
            caller until the shutdown is complete.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IChannelExtensions.CloseAsync(RabbitMQ.Client.IChannel,System.UInt16,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously close this channel.
            </summary>
            <param name="channel">The channel.</param>
            <param name="replyCode">The reply code.</param>
            <param name="replyText">The reply text.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <remarks>
            The method behaves in the same way as CloseAsync(), with the only
            difference that the channel is closed with the given channel
            close code and message.
            <para>
            The close code (See under "Reply Codes" in the AMQP specification)
            </para><para>
            A message indicating the reason for closing the channel
            </para>
            </remarks>
        </member>
        <member name="T:RabbitMQ.Client.IConnection">
            <summary>
            Main interface to an AMQP connection.
            </summary>
            <remarks>
            <para>
            Instances of <see cref="T:RabbitMQ.Client.IConnection"/> are used to create fresh
            sessions/channels. The <see cref="T:RabbitMQ.Client.ConnectionFactory"/> class is used to
            construct <see cref="T:RabbitMQ.Client.IConnection"/> instances.
             Please see the documentation for ConnectionFactory for an example of usage.
             Alternatively, an API tutorial can be found in the User Guide.
            </para>
            <para>
            Extends the <see cref="T:System.IDisposable"/> and the <see cref="T:System.IAsyncDisposable"/> interface, so that the "using"
            statement can be used to scope the lifetime of a connection when
            appropriate.
            </para>
            </remarks>
        </member>
        <member name="P:RabbitMQ.Client.IConnection.ChannelMax">
            <summary>
            The maximum channel number this connection supports (0 if unlimited).
            Usable channel numbers range from 1 to this number, inclusive.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IConnection.ClientProperties">
            <summary>
            A copy of the client properties that has been sent to the server.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IConnection.CloseReason">
            <summary>
            Returns null if the connection is still in a state
            where it can be used, or the cause of its closure otherwise.
            </summary>
            <remarks>
            <para>
            Applications should use the ConnectionShutdown event to
            avoid race conditions. The scenario to avoid is checking
            <see cref="P:RabbitMQ.Client.IConnection.CloseReason"/>, seeing it is null (meaning the <see cref="T:RabbitMQ.Client.IConnection"/>
            was available for use at the time of the check), and
            interpreting this mistakenly as a guarantee that the
            <see cref="T:RabbitMQ.Client.IConnection"/> will remain usable for a time. Instead, the
            operation of interest should simply be attempted: if the
            <see cref="T:RabbitMQ.Client.IConnection"/> is not in a usable state, an exception will be
            thrown (most likely <see cref="T:RabbitMQ.Client.Exceptions.OperationInterruptedException"/>, but may
            vary depending on the particular operation being attempted).
            </para>
            </remarks>
        </member>
        <member name="P:RabbitMQ.Client.IConnection.Endpoint">
            <summary>
            Retrieve the endpoint this connection is connected to.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IConnection.FrameMax">
            <summary>
            The maximum frame size this connection supports (0 if unlimited).
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IConnection.Heartbeat">
            <summary>
            The current heartbeat setting for this connection (System.TimeSpan.Zero for disabled).
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IConnection.IsOpen">
            <summary>
            Returns true if the connection is still in a state where it can be used.
            Identical to checking if <see cref="P:RabbitMQ.Client.IConnection.CloseReason"/> equal null.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IConnection.Protocol">
            <summary>
            The <see cref="T:RabbitMQ.Client.IProtocol"/> this connection is using to communicate with its peer.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IConnection.ServerProperties">
            <summary>
            A dictionary of the server properties sent by the server while establishing the connection.
            This typically includes the product name and version of the server.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IConnection.ShutdownReport">
            <summary>
            Returns the list of <see cref="T:RabbitMQ.Client.ShutdownReportEntry"/> objects that contain information
            about any errors reported while closing the connection in the order they appeared
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IConnection.ClientProvidedName">
            <summary>
            Application-specific connection name, will be displayed in the management UI
            if RabbitMQ server supports it. This value doesn't have to be unique and cannot
            be used as a connection identifier, e.g. in HTTP API requests.
            This value is supposed to be human-readable.
            </summary>
        </member>
        <member name="E:RabbitMQ.Client.IConnection.CallbackExceptionAsync">
            <summary>
            Signalled when an exception occurs in a callback invoked by the connection.
            </summary>
            <remarks>
            This event is signalled when a ConnectionShutdown handler
            throws an exception. If, in future, more events appear on
            <see cref="T:RabbitMQ.Client.IConnection"/>, then this event will be signalled whenever one
            of those event handlers throws an exception, as well.
            </remarks>
        </member>
        <member name="E:RabbitMQ.Client.IConnection.ConnectionShutdownAsync">
            <summary>
            Raised when the connection is destroyed.
            </summary>
            <remarks>
            If the connection is already destroyed at the time an
            event handler is added to this event, the event handler
            will be fired immediately.
            </remarks>
        </member>
        <member name="E:RabbitMQ.Client.IConnection.RecoverySucceededAsync">
            <summary>
            Raised when the connection completes recovery.
            </summary>
            <remarks>
            This event will never fire for connections that disable automatic recovery.
            </remarks>
        </member>
        <member name="E:RabbitMQ.Client.IConnection.ConnectionRecoveryErrorAsync">
            <summary>
            Raised when the connection recovery fails, e.g. because reconnection or topology
            recovery failed.
            </summary>
            <remarks>
            This event will never fire for connections that disable automatic recovery.
            </remarks>
        </member>
        <member name="E:RabbitMQ.Client.IConnection.ConsumerTagChangeAfterRecoveryAsync">
            <summary>
            Raised when the server-generated tag of a consumer registered on this connection changes during
            connection recovery. This allows applications that need to be aware of server-generated
            consumer tag values to keep track of the changes.
            </summary>
            <remarks>
            This event will never fire for connections that disable automatic recovery.
            </remarks>
        </member>
        <member name="E:RabbitMQ.Client.IConnection.QueueNameChangedAfterRecoveryAsync">
            <summary>
            Raised when the name of a server-named queue declared on this connection changes during
            connection recovery. This allows applications that need to be aware of server-named
            queue names to keep track of the changes.
            </summary>
            <remarks>
            This event will never fire for connections that disable automatic recovery.
            </remarks>
        </member>
        <member name="E:RabbitMQ.Client.IConnection.RecoveringConsumerAsync">
            <summary>
            Raised when a consumer is about to be recovered. This event raises when topology recovery
            is enabled, and just before the consumer is recovered. This allows applications to update
            the consumer arguments before the consumer is recovered. It could be particularly useful
            when consuming from a stream queue, as it allows to update the consumer offset argument
            just before the consumer is recovered.
            </summary>
            <remarks>
            This event will never fire for connections that disable automatic recovery.
            </remarks>
        </member>
        <member name="E:RabbitMQ.Client.IConnection.ConnectionBlockedAsync">
            <summary>
            Raised when a connection is blocked by the AMQP broker.
            </summary>
        </member>
        <member name="E:RabbitMQ.Client.IConnection.ConnectionUnblockedAsync">
            <summary>
            Raised when a connection is unblocked by the AMQP broker.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IConnection.UpdateSecretAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            This method updates the secret used to authenticate this connection.
            It is used when secrets have an expiration date and need to be renewed,
            like OAuth 2 tokens.
            </summary>
            <param name="newSecret">The new secret.</param>
            <param name="reason">The reason for the secret update.</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:RabbitMQ.Client.IConnection.CloseAsync(System.UInt16,System.String,System.TimeSpan,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously close this connection and all its channels
            and wait with a timeout for all the in-progress close operations to complete.
            </summary>
            <param name="reasonCode">The close code (See under "Reply Codes" in the AMQP 0-9-1 specification).</param>
            <param name="reasonText">A message indicating the reason for closing the connection.</param>
            <param name="timeout"></param>
            <param name="abort">Whether or not this close is an abort (ignores certain exceptions).</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:RabbitMQ.Client.IConnection.CreateChannelAsync(RabbitMQ.Client.CreateChannelOptions,System.Threading.CancellationToken)">
            <summary>
            Asynchronously create and return a fresh channel, session, and channel.
            </summary>
            <param name="options">
            The channel creation options.
            </param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:RabbitMQ.Client.IConnectionExtensions.CloseAsync(RabbitMQ.Client.IConnection,System.Threading.CancellationToken)">
            <summary>
            Asynchronously close this connection and all its channels.
            </summary>
            <remarks>
            Note that all active channels and sessions will be
            closed if this method is called. It will wait for the in-progress
            close operation to complete. This method will not return to the caller
            until the shutdown is complete. If the connection is already closed
            (or closing), then this method will do nothing.
            It can also throw <see cref="T:System.IO.IOException"/> when socket was closed unexpectedly.
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IConnectionExtensions.CloseAsync(RabbitMQ.Client.IConnection,System.UInt16,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously close this connection and all its channels.
            </summary>
            <remarks>
            The method behaves in the same way as <see cref="M:RabbitMQ.Client.IConnectionExtensions.CloseAsync(RabbitMQ.Client.IConnection,System.Threading.CancellationToken)"/>, with the only
            difference that the connection is closed with the given connection close code and message.
            <para>
            The close code (See under "Reply Codes" in the AMQP specification).
            </para>
            <para>
            A message indicating the reason for closing the connection.
            </para>
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IConnectionExtensions.CloseAsync(RabbitMQ.Client.IConnection,System.TimeSpan)">
            <summary>
            Asynchronously close this connection and all its channels
            and wait with a timeout for all the in-progress close operations to complete.
            </summary>
            <remarks>
            Note that all active channels and sessions will be
            closed if this method is called. It will wait for the in-progress
            close operation to complete with a timeout. If the connection is
            already closed (or closing), then this method will do nothing.
            It can also throw <see cref="T:System.IO.IOException"/> when socket was closed unexpectedly.
            If timeout is reached and the close operations haven't finished, then socket is forced to close.
            <para>
            To wait infinitely for the close operations to complete use <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/>.
            </para>
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IConnectionExtensions.CloseAsync(RabbitMQ.Client.IConnection,System.UInt16,System.String,System.TimeSpan)">
            <summary>
            Asynchronously close this connection and all its channels
            and wait with a timeout for all the in-progress close operations to complete.
            </summary>
            <remarks>
            The method behaves in the same way as <see cref="M:RabbitMQ.Client.IConnectionExtensions.CloseAsync(RabbitMQ.Client.IConnection,System.TimeSpan)"/>, with the only
            difference that the connection is closed with the given connection close code and message.
            <para>
            The close code (See under "Reply Codes" in the AMQP 0-9-1 specification).
            </para>
            <para>
            A message indicating the reason for closing the connection.
            </para>
            <para>
            Operation timeout.
            </para>
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IConnectionExtensions.AbortAsync(RabbitMQ.Client.IConnection)">
             <summary>
             Asynchronously abort this connection and all its channels.
             </summary>
             <remarks>
             Note that all active channels and sessions will be closed if this method is called.
             In comparison to normal <see cref="M:RabbitMQ.Client.IConnectionExtensions.CloseAsync(RabbitMQ.Client.IConnection,System.Threading.CancellationToken)"/> method, <see cref="M:RabbitMQ.Client.IConnectionExtensions.AbortAsync(RabbitMQ.Client.IConnection)"/> will not throw
             <see cref="T:System.IO.IOException"/> during closing connection.
            This method waits infinitely for the in-progress close operation to complete.
             </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IConnectionExtensions.AbortAsync(RabbitMQ.Client.IConnection,System.UInt16,System.String)">
            <summary>
            Asynchronously abort this connection and all its channels.
            </summary>
            <remarks>
            The method behaves in the same way as <see cref="M:RabbitMQ.Client.IConnectionExtensions.AbortAsync(RabbitMQ.Client.IConnection)"/>, with the only
            difference that the connection is closed with the given connection close code and message.
            <para>
            The close code (See under "Reply Codes" in the AMQP 0-9-1 specification)
            </para>
            <para>
            A message indicating the reason for closing the connection
            </para>
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IConnectionExtensions.AbortAsync(RabbitMQ.Client.IConnection,System.TimeSpan)">
            <summary>
            Asynchronously abort this connection and all its channels and wait with a
            timeout for all the in-progress close operations to complete.
            </summary>
            <remarks>
            This method, behaves in a similar way as method <see cref="M:RabbitMQ.Client.IConnectionExtensions.AbortAsync(RabbitMQ.Client.IConnection)"/> with the
            only difference that it explicitly specifies a timeout given
            for all the in-progress close operations to complete.
            If timeout is reached and the close operations haven't finished, then socket is forced to close.
            <para>
            To wait infinitely for the close operations to complete use <see cref="F:System.Threading.Timeout.Infinite"/>.
            </para>
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.IConnectionExtensions.AbortAsync(RabbitMQ.Client.IConnection,System.UInt16,System.String,System.TimeSpan)">
            <summary>
            Asynchronously abort this connection and all its channels and wait with a
            timeout for all the in-progress close operations to complete.
            </summary>
            <remarks>
            The method behaves in the same way as <see cref="M:RabbitMQ.Client.IConnectionExtensions.AbortAsync(RabbitMQ.Client.IConnection,System.TimeSpan)"/>, with the only
            difference that the connection is closed with the given connection close code and message.
            <para>
            The close code (See under "Reply Codes" in the AMQP 0-9-1 specification).
            </para>
            <para>
            A message indicating the reason for closing the connection.
            </para>
            </remarks>
        </member>
        <member name="P:RabbitMQ.Client.IConnectionFactory.ClientProperties">
            <summary>
            Dictionary of client properties to be sent to the server.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IConnectionFactory.Password">
            <summary>
            Password to use when authenticating to the server.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IConnectionFactory.RequestedChannelMax">
            <summary>
            Maximum channel number to ask for.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IConnectionFactory.RequestedFrameMax">
            <summary>
            Frame-max parameter to ask for (in bytes).
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IConnectionFactory.RequestedHeartbeat">
            <summary>
            Heartbeat setting to request.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IConnectionFactory.UserName">
            <summary>
            Username to use when authenticating to the server.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IConnectionFactory.VirtualHost">
            <summary>
            Virtual host to access during this connection.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IConnectionFactory.CredentialsProvider">
            <summary>
            ICredentialsProvider used to obtain username and password.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IConnectionFactory.Uri">
            <summary>
            Sets or gets the AMQP Uri to be used for connections.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IConnectionFactory.ClientProvidedName">
            <summary>
            Default client provided name to be used for connections.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IConnectionFactory.AuthMechanismFactory(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Given a list of mechanism names supported by the server, select a preferred mechanism,
            or null if we have none in common.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IConnectionFactory.CreateConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously create a connection to the specified endpoint.
            </summary>
            <param name="cancellationToken">Cancellation token for this connection</param>
        </member>
        <member name="M:RabbitMQ.Client.IConnectionFactory.CreateConnectionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously create a connection to the specified endpoint.
            </summary>
            <param name="clientProvidedName">
            Application-specific connection name, will be displayed in the management UI
            if RabbitMQ server supports it. This value doesn't have to be unique and cannot
            be used as a connection identifier, e.g. in HTTP API requests.
            This value is supposed to be human-readable.
            </param>
            <param name="cancellationToken">Cancellation token for this connection</param>
            <returns>Open connection</returns>
        </member>
        <member name="M:RabbitMQ.Client.IConnectionFactory.CreateConnectionAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Asynchronously connects to the first reachable hostname from the list.
            </summary>
            <param name="hostnames">List of host names to use</param>
            <param name="cancellationToken">Cancellation token for this connection</param>
            <returns>Open connection</returns>
        </member>
        <member name="M:RabbitMQ.Client.IConnectionFactory.CreateConnectionAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously connects to the first reachable hostname from the list.
            </summary>
            <param name="hostnames">List of host names to use</param>
            <param name="clientProvidedName">
            Application-specific connection name, will be displayed in the management UI
            if RabbitMQ server supports it. This value doesn't have to be unique and cannot
            be used as a connection identifier, e.g. in HTTP API requests.
            This value is supposed to be human-readable.
            </param>
            <param name="cancellationToken">Cancellation token for this connection</param>
            <returns>Open connection</returns>
        </member>
        <member name="M:RabbitMQ.Client.IConnectionFactory.CreateConnectionAsync(System.Collections.Generic.IEnumerable{RabbitMQ.Client.AmqpTcpEndpoint},System.Threading.CancellationToken)">
            <summary>
            Asynchronously create a connection using a list of endpoints.
            The selection behaviour can be overridden by configuring the EndpointResolverFactory.
            </summary>
            <param name="endpoints">
            List of endpoints to use for the initial
            connection and recovery.
            </param>
            <param name="cancellationToken">Cancellation token for this connection</param>
            <returns>Open connection</returns>
            <exception cref="T:RabbitMQ.Client.Exceptions.BrokerUnreachableException">
            When no hostname was reachable.
            </exception>
        </member>
        <member name="M:RabbitMQ.Client.IConnectionFactory.CreateConnectionAsync(System.Collections.Generic.IEnumerable{RabbitMQ.Client.AmqpTcpEndpoint},System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously create a connection using a list of endpoints.
            The selection behaviour can be overridden by configuring the EndpointResolverFactory.
            </summary>
            <param name="endpoints">
            List of endpoints to use for the initial
            connection and recovery.
            </param>
            <param name="clientProvidedName">
            Application-specific connection name, will be displayed in the management UI
            if RabbitMQ server supports it. This value doesn't have to be unique and cannot
            be used as a connection identifier, e.g. in HTTP API requests.
            This value is supposed to be human-readable.
            </param>
            <param name="cancellationToken">Cancellation token for this connection</param>
            <returns>Open connection</returns>
            <exception cref="T:RabbitMQ.Client.Exceptions.BrokerUnreachableException">
            When no hostname was reachable.
            </exception>
        </member>
        <member name="P:RabbitMQ.Client.IConnectionFactory.HandshakeContinuationTimeout">
            <summary>
            Amount of time protocol handshake operations are allowed to take before
            timing out.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IConnectionFactory.ContinuationTimeout">
            <summary>
            Amount of time protocol  operations (e.g. <code>queue.declare</code>) are allowed to take before
            timing out.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IConnectionFactory.ConsumerDispatchConcurrency">
            <summary>
            Set to a value greater than one to enable concurrent processing. For a concurrency greater than one <see cref="T:RabbitMQ.Client.IAsyncBasicConsumer"/>
            will be offloaded to the worker thread pool so it is important to choose the value for the concurrency wisely to avoid thread pool overloading.
            <see cref="T:RabbitMQ.Client.IAsyncBasicConsumer"/> can handle concurrency much more efficiently due to the non-blocking nature of the consumer.
            Defaults to 1.
            </summary>
            <remarks>For concurrency greater than one this removes the guarantee that consumers handle messages in the order they receive them.
            In addition to that consumers need to be thread/concurrency safe.</remarks>
        </member>
        <member name="P:RabbitMQ.Client.Credentials.ValidUntil">
            <summary>
            If credentials have an expiry time this property returns the interval.
            Otherwise, it returns null.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.IEndpointResolver.All">
            <summary>
            Return all AmqpTcpEndpoints in the order they should be tried.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.Channel.m_connectionStartCell">
            <summary>Only used to kick-start a connection open
            sequence. See <see cref="M:RabbitMQ.Client.Framing.Connection.OpenAsync(System.Threading.CancellationToken)"/> </summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Channel.OnChannelShutdownAsync(RabbitMQ.Client.Events.ShutdownEventArgs)">
            <summary>Broadcasts notification of the final shutdown of the channel.</summary>
            <remarks>
            <para>
            Do not call anywhere other than at the end of OnSessionShutdownAsync.
            </para>
            <para>
            Must not be called when m_closeReason is null, because
            otherwise there's a window when a new continuation could be
            being enqueued at the same time as we're broadcasting the
            shutdown event. See the definition of Enqueue() above.
            </para>
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.Impl.Channel.DispatchCommandAsync(RabbitMQ.Client.Impl.IncomingCommand,System.Threading.CancellationToken)">
            <summary>
            Returning <c>true</c> from this method means that the command was server-originated,
            and handled already.
            Returning <c>false</c> (the default) means that the incoming command is the response to
            a client-initiated RPC call, and must be handled.
            </summary>
            <param name="cmd">The incoming command from the AMQP server</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:RabbitMQ.Client.Impl.ConnectionTuneDetails">
            <summary>Essential information from an incoming Connection.Tune
            method.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.ConnectionTuneDetails.m_channelMax">
            <summary>The peer's suggested channel-max parameter.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.ConnectionTuneDetails.m_frameMax">
            <summary>The peer's suggested frame-max parameter.</summary>
        </member>
        <member name="F:RabbitMQ.Client.Impl.ConnectionTuneDetails.m_heartbeatInSeconds">
            <summary>The peer's suggested heartbeat parameter.</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.Framing.Heartbeat.Payload">
             <summary>
             Compiler trick to directly refer to static data in the assembly, see here: https://github.com/dotnet/roslyn/pull/24621
             A heartbeat frame has the following layout:
             +--------------------+------------------+-----------------+--------------------------+
             | Frame Type(1 byte) | Channel(2 bytes) | Length(4 bytes) | End Frame Marker(1 byte) |
             +--------------------+------------------+-----------------+--------------------------+
             | 0x08               | 0x0000           | 0x00000000      | 0xCE                     |
             +--------------------+------------------+-----------------+--------------------------+
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.IFrameHandler.ReadTimeout">
            <summary>Socket read timeout. System.Threading.Timeout.InfiniteTimeSpan signals "infinity".</summary>
        </member>
        <member name="P:RabbitMQ.Client.Impl.IFrameHandler.WriteTimeout">
            <summary>Socket write timeout. System.Threading.Timeout.InfiniteTimeSpan signals "infinity".</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.IFrameHandler.ReadFrameAsync(RabbitMQ.Client.Impl.InboundFrame,System.Threading.CancellationToken)">
            <summary>Read a frame from the underlying
            transport. Returns null if the read operation timed out
            (see Timeout property).</summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.IFrameHandler.TryReadFrame(RabbitMQ.Client.Impl.InboundFrame)">
            <summary>Try to synchronously read a frame from the underlying transport.
            Returns false if connection buffer contains insufficient data.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.MainSession">
            <summary>Small ISession implementation used only for channel 0.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.RpcContinuationQueue">
            <summary>Manages a queue of waiting AMQP RPC requests.</summary>
            <remarks>
            <para>
             Currently, pipelining of requests is forbidden by this
             implementation. The AMQP 0-8 and 0-9 specifications themselves
             forbid pipelining, but only by the skin of their teeth and
             under a somewhat generous reading.
            </para>
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.Impl.RpcContinuationQueue.Enqueue(RabbitMQ.Client.Impl.IRpcContinuation)">
            <summary>Enqueue a continuation, marking a pending RPC.</summary>
            <remarks>
            <para>
             Continuations are retrieved in FIFO order by calling Next().
            </para>
            <para>
             In the current implementation, only one continuation can
             be queued up at once. Calls to Enqueue() when a
             continuation is already enqueued will result in
             NotSupportedException being thrown.
            </para>
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.Impl.RpcContinuationQueue.HandleChannelShutdown(RabbitMQ.Client.Events.ShutdownEventArgs)">
            <summary>Interrupt all waiting continuations.</summary>
            <remarks>
            <para>
             There's just the one potential waiter in the current
             implementation.
            </para>
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.Impl.RpcContinuationQueue.Next">
            <summary>Retrieve the next waiting continuation.</summary>
            <remarks>
            <para>
             It is an error to call this method when there are no
             waiting continuations. In the current implementation, if
             this happens, null will be returned (which will usually
             result in an immediate NullPointerException in the
             caller). Correct code will always arrange for a
             continuation to have been Enqueue()d before calling this
             method.
            </para>
            </remarks>
        </member>
        <member name="M:RabbitMQ.Client.Impl.RpcContinuationQueue.TryPeek``1(``0@)">
            <summary>Peek at the next waiting continuation.</summary>
            <remarks>
            <para>
             It is an error to call this method when there are no
             waiting continuations.
            </para>
            </remarks>
        </member>
        <member name="T:RabbitMQ.Client.Impl.Session">
            <summary>Normal ISession implementation used during normal channel operation.</summary>
        </member>
        <member name="T:RabbitMQ.Client.Impl.SslHelper">
            <summary>
            Represents an <see cref="T:RabbitMQ.Client.Impl.SslHelper"/> which does the actual heavy lifting to set up an SSL connection,
             using the config options in an <see cref="T:RabbitMQ.Client.SslOption"/> to make things cleaner.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.SslHelper.TcpUpgradeAsync(System.IO.Stream,RabbitMQ.Client.SslOption,System.Threading.CancellationToken)">
            <summary>
            Upgrade a Tcp stream to an Ssl stream using the TLS options provided.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.Impl.WireFormatting.ReadDictionary(System.ReadOnlySpan{System.Byte},System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <summary>Reads an AMQP "table" definition from the reader.</summary>
            <remarks>
             Supports the AMQP 0-8/0-9 standard entry types S, I, D, T
             and F, as well as the QPid-0-8 specific b, d, f, l, s, t,
             x and V types and the AMQP 0-9-1 A type.
            </remarks>
             <returns>A <seealso cref="T:System.Collections.Generic.Dictionary`2"/>.</returns>
        </member>
        <member name="T:RabbitMQ.Client.INetworkConnection">
            <summary>
            Common interface for network (TCP/IP) connection classes.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.INetworkConnection.LocalPort">
            <summary>
            Local port.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.INetworkConnection.RemotePort">
            <summary>
            Remote port.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.InternalConstants.DefaultRabbitMqMaxInboundMessageBodySize">
            <summary>
            Largest message size, in bytes, allowed in RabbitMQ.        
            Note: <code>rabbit.max_message_size</code> setting (https://www.rabbitmq.com/configure.html)
            configures the largest message size which should be lower than this maximum of 128MiB.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.InternalConstants.DefaultRabbitMqMaxClientProvideNameLength">
            <summary>
            Largest client provide name, in characters, allowed in RabbitMQ.
            This is not configurable, but was discovered while working on this issue:
            https://github.com/rabbitmq/rabbitmq-dotnet-client/issues/980
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.IProtocol">
            <summary>
            Object describing various overarching parameters
            associated with a particular AMQP protocol variant.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IProtocol.ApiName">
            <summary>
            Retrieve the protocol's API name, used for printing,
            configuration properties, IDE integration, Protocols.cs etc.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IProtocol.DefaultPort">
            <summary>
            Retrieve the protocol's default TCP port.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IProtocol.MajorVersion">
            <summary>
            Retrieve the protocol's major version number.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IProtocol.MinorVersion">
            <summary>
            Retrieve the protocol's minor version number.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.IProtocol.Revision">
            <summary>
            Retrieve the protocol's revision (if specified).
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.IRecoverable">
            <summary>
            A marker interface for entities that are recoverable (currently connection or channel).
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.ITcpClient">
            <summary>
            Wrapper interface for <see cref="T:System.Net.Sockets.Socket"/>.
            Provides the socket for socket frame handler class.
            </summary>
            <remarks>Contains all methods that are currently in use in rabbitmq client.</remarks>
        </member>
        <member name="P:RabbitMQ.Client.PlainMechanismFactory.Name">
            <summary>
            The name of the authentication mechanism, as negotiated on the wire.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.PlainMechanismFactory.GetInstance">
            <summary>
            Return a new authentication mechanism implementation.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.Protocols">
            <summary>
             Provides access to the supported <see cref="T:RabbitMQ.Client.IProtocol"/> implementations.
             </summary>
        </member>
        <member name="F:RabbitMQ.Client.Protocols.AMQP_0_9_1">
            <summary>
             Protocol version 0-9-1 as modified by Pivotal.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Protocols.DefaultProtocol">
            <summary>
             Retrieve the current default protocol variant (currently AMQP_0_9_1).
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.PublicationAddress">
            <summary>
            Container for an exchange name, exchange type and
            routing key, usable as the target address of a message to be published.
            </summary>
            <remarks>
            <para>
            The syntax used for the external representation of instances
            of this class is compatible with QPid's "Reply-To" field
            pseudo-URI format. The pseudo-URI format is
            (exchange-type)://(exchange-name)/(routing-key), where
            exchange-type is one of the permitted exchange type names (see
            class ExchangeType), exchange-name must be present but may be
            empty, and routing-key must be present but may be empty.
            </para>
            <para>
            The syntax is as it is solely for compatibility with QPid's
            existing usage of the ReplyTo field; the AMQP specifications
            0-8 and 0-9 do not define the format of the field, and do not
            define any format for the triple (exchange name, exchange
            type, routing key) that could be used instead.
            </para>
            </remarks>
        </member>
        <member name="F:RabbitMQ.Client.PublicationAddress.PSEUDO_URI_PARSER">
            <summary>
            Regular expression used to extract the exchange-type,
            exchange-name and routing-key from a string.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.PublicationAddress.#ctor(System.String,System.String,System.String)">
            <summary>
             Creates a new instance of the <see cref="T:RabbitMQ.Client.PublicationAddress"/>.
            </summary>
            <param name="exchangeType">Exchange type.</param>
            <param name="exchangeName">Exchange name.</param>
            <param name="routingKey">Routing key.</param>
        </member>
        <member name="F:RabbitMQ.Client.PublicationAddress.ExchangeName">
            <summary>
            Retrieve the exchange name.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.PublicationAddress.ExchangeType">
            <summary>
            Retrieve the exchange type string.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.PublicationAddress.RoutingKey">
             <summary>
            Retrieve the routing key.
             </summary>
        </member>
        <member name="M:RabbitMQ.Client.PublicationAddress.Parse(System.String)">
            <summary>
            Parse a <see cref="T:RabbitMQ.Client.PublicationAddress"/> out of the given string,
             using the <see cref="F:RabbitMQ.Client.PublicationAddress.PSEUDO_URI_PARSER"/> regex.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.PublicationAddress.ToString">
            <summary>
            Reconstruct the "uri" from its constituents.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.QueueDeclareOk">
            <summary>
            Represents Queue info.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.QueueDeclareOk.#ctor(System.String,System.UInt32,System.UInt32)">
            <summary>
            Creates a new instance of the <see cref="T:RabbitMQ.Client.QueueDeclareOk"/>.
            </summary>
            <param name="queueName">Queue name.</param>
            <param name="messageCount">Message count.</param>
            <param name="consumerCount">Consumer count.</param>
        </member>
        <member name="F:RabbitMQ.Client.QueueDeclareOk.ConsumerCount">
            <summary>
            Consumer count.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.QueueDeclareOk.MessageCount">
            <summary>
            Message count.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.QueueDeclareOk.QueueName">
            <summary>
            Queue name.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.ReadOnlyBasicProperties">
            <summary>
            AMQP specification content header properties for content class "basic"
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.ShutdownInitiator">
            <summary>
             Describes the source of a shutdown event.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ShutdownInitiator.Application">
            <summary>
             The shutdown event originated from the application using the RabbitMQ .NET client library.
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.ShutdownInitiator.Library">
            <summary>
             The shutdown event originated from the RabbitMQ .NET client library itself.
            </summary>
            <remarks>
             Shutdowns with this ShutdownInitiator code may appear if,
             for example, an internal error is detected by the client,
             or if the server sends a syntactically invalid
             frame. Another potential use is on IConnection AutoClose.
            </remarks>
        </member>
        <member name="F:RabbitMQ.Client.ShutdownInitiator.Peer">
            <summary>
             The shutdown event originated from the remote AMQP peer.
            </summary>
            <remarks>
             A valid received connection.close or channel.close event
             will manifest as a shutdown with this ShutdownInitiator.
            </remarks>
        </member>
        <member name="T:RabbitMQ.Client.ShutdownReportEntry">
            <summary>
            Single entry object in the shutdown report that encapsulates description
            of the error which occurred during shutdown.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ShutdownReportEntry.Description">
            <summary>
            Description provided in the error.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.ShutdownReportEntry.Exception">
            <summary>
            <see cref="P:RabbitMQ.Client.ShutdownReportEntry.Exception"/> object that occurred during shutdown, or null if unspecified.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.SslOption">
            <summary>
            Represents a set of configurable TLS options for a connection. Use this class to configure
            TLS version used, client certificate list or file location, peer certificate verification
            (validation) functions, expected server name (Subject Alternative Name or Common Name),
            and so on.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.SslOption.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs an <see cref="T:RabbitMQ.Client.SslOption"/> specifying both the server canonical name and the client's certificate path.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.SslOption.#ctor">
            <summary>
            Constructs an <see cref="T:RabbitMQ.Client.SslOption"/> with no parameters set.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.SslOption.AcceptablePolicyErrors">
            <summary>
            Retrieve or set the set of TLS policy (peer verification) errors that are deemed acceptable.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.SslOption.CertPassphrase">
            <summary>
            Retrieve or set the client certificate passphrase.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.SslOption.CertPath">
            <summary>
            Retrieve or set the path to client certificate.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.SslOption.CertificateSelectionCallback">
            <summary>
            An optional client TLS certificate selection callback. If this is not specified,
            the first valid certificate found will be used.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.SslOption.CertificateValidationCallback">
            <summary>
            An optional peer verification (TLS certificate validation) callback. If this is not specified,
            the default callback will be used in conjunction with the <see cref="P:RabbitMQ.Client.SslOption.AcceptablePolicyErrors"/> property to
            determine if the peer's (server's) certificate should be considered valid (acceptable).
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.SslOption.Certs">
            <summary>
            Retrieve or set the X509CertificateCollection containing the client certificate.
            If no collection is set, the client will attempt to load one from the specified <see cref="P:RabbitMQ.Client.SslOption.CertPath"/>.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.SslOption.CheckCertificateRevocation">
            <summary>
            Attempts to check certificate revocation status. Default is false.
            Set to true to check peer certificate for revocation.
            </summary>
            <remarks>
            Uses the built-in .NET TLS implementation machinery for checking a certificate against
            certificate revocation lists.
            </remarks>
        </member>
        <member name="P:RabbitMQ.Client.SslOption.Enabled">
            <summary>
            Controls if TLS should indeed be used. Set to false to disable TLS
            on the connection.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.SslOption.ServerName">
            <summary>
            Retrieve or set server's expected name.
            This MUST match the Subject Alternative Name (SAN) or CN on the peer's (server's) leaf certificate,
            otherwise the TLS connection will fail.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.SslOption.Version">
            <summary>
            Retrieve or set the TLS protocol version.
            The client will let the OS pick a suitable version by using <see cref="F:System.Security.Authentication.SslProtocols.None" />.
            If this option is disabled, e.g.see via app context, the client will attempt to fall back
            to TLSv1.2.
            </summary>
            <seealso cref="T:System.Security.Authentication.SslProtocols" />
            <seealso href="https://www.rabbitmq.com/ssl.html#dotnet-client" />
            <seealso href="https://docs.microsoft.com/en-us/dotnet/framework/network-programming/tls?view=netframework-4.6.2" />
            <seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.security.authentication.sslprotocols?view=netframework-4.8" />
        </member>
        <member name="M:RabbitMQ.Client.SslOption.UseFallbackTlsVersions">
            <summary>
            Reconfigures the instance to enable/use TLSv1.2.
            Only used in environments where System.Security.Authentication.SslProtocols.None
            is unavailable or effectively disabled, as reported by System.Net.ServicePointManager.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.TcpClientAdapter">
            <summary>
            Simple wrapper around <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.ThrottlingRateLimiter">
             <summary>
             A rate limiter that controls the rate of operations by limiting concurrency and applying delays 
             when a specified threshold of concurrency usage is reached.
            
             The delay algorithm checks the current available permits from the concurrency limiter. If the available permits are greater than or equal
             to the throttling threshold, no delay is applied.  Otherwise, it calculates a delay based on the percentage of permits used,
             scaling it up to a maximum of 1000 milliseconds.
             </summary>
        </member>
        <member name="F:RabbitMQ.Client.ThrottlingRateLimiter.DefaultThrottlingPercentage">
            <summary>
            The default throttling percentage, which defines the threshold for applying throttling, set to 50%.
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.ThrottlingRateLimiter.#ctor(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:RabbitMQ.Client.ThrottlingRateLimiter"/> class with the specified
            maximum number of concurrent calls and an optional throttling percentage.
            </summary>
            <param name="maxConcurrentCalls">The maximum number of concurrent operations allowed.</param>
            <param name="throttlingPercentage">
            The percentage of <paramref name="maxConcurrentCalls"/> at which throttling is triggered. 
            Defaults to 50% if not specified.
            </param>
        </member>
        <member name="T:RabbitMQ.Client.TopologyRecoveryExceptionHandler">
            <summary>
            Custom logic for handling topology recovery exceptions that match the specified filters.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.TopologyRecoveryExceptionHandler.ExchangeRecoveryExceptionCondition">
            <summary>
            Decides which exchange recovery exceptions the custom exception handler is applied to.
            Default condition applies the exception handler to all exchange recovery exceptions.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.TopologyRecoveryExceptionHandler.QueueRecoveryExceptionCondition">
            <summary>
            Decides which queue recovery exceptions the custom exception handler is applied to.
            Default condition applies the exception handler to all queue recovery exceptions.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.TopologyRecoveryExceptionHandler.BindingRecoveryExceptionCondition">
            <summary>
            Decides which binding recovery exceptions the custom exception handler is applied to.
            Default condition applies the exception handler to all binding recovery exceptions.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.TopologyRecoveryExceptionHandler.ConsumerRecoveryExceptionCondition">
            <summary>
            Decides which consumer recovery exceptions the custom exception handler is applied to.
            Default condition applies the exception handler to all consumer recovery exceptions.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.TopologyRecoveryExceptionHandler.ExchangeRecoveryExceptionHandlerAsync">
            <summary>
            Retries, or otherwise handles, an exception thrown when attempting to recover an exchange.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.TopologyRecoveryExceptionHandler.QueueRecoveryExceptionHandlerAsync">
            <summary>
            Retries, or otherwise handles, an exception thrown when attempting to recover a queue.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.TopologyRecoveryExceptionHandler.BindingRecoveryExceptionHandlerAsync">
            <summary>
            Retries, or otherwise handles, an exception thrown when attempting to recover a binding.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.TopologyRecoveryExceptionHandler.ConsumerRecoveryExceptionHandlerAsync">
            <summary>
            Retries, or otherwise handles, an exception thrown when attempting to recover a consumer.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.TopologyRecoveryFilter">
            <summary>
            Filter to know which entities (exchanges, queues, bindings, consumers) should be recovered by topology recovery.
            By default, allows all entities to be recovered.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.TopologyRecoveryFilter.ExchangeFilter">
            <summary>
            Decides whether an exchange is recovered or not.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.TopologyRecoveryFilter.QueueFilter">
            <summary>
            Decides whether a queue is recovered or not.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.TopologyRecoveryFilter.BindingFilter">
            <summary>
            Decides whether a binding is recovered or not.
            </summary>
        </member>
        <member name="P:RabbitMQ.Client.TopologyRecoveryFilter.ConsumerFilter">
            <summary>
            Decides whether a consumer is recovered or not.
            </summary>
        </member>
        <member name="T:RabbitMQ.Client.Util.IntAllocator">
            <summary>
            <see href="https://github.com/rabbitmq/rabbitmq-java-client/blob/main/src/main/java/com/rabbitmq/utility/IntAllocator.java"/>
            </summary>
        </member>
        <member name="F:RabbitMQ.Client.Util.IntAllocator._freeSet">
            <summary>
            A bit is SET/true in _freeSet if the corresponding integer is FREE
            A bit is UNSET/false in freeSet if the corresponding integer is ALLOCATED
            </summary>
        </member>
        <member name="M:RabbitMQ.Client.Util.IntAllocator.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an IntAllocator allocating integer IDs within the
            inclusive range [<c>bottom</c>, <c>top</c>].
            </summary>
            <param name="bottom">lower end of range</param>
            <param name="top">upper end of range (incusive)</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:RabbitMQ.Client.Util.IntAllocator.Free(System.Int32)">
            <summary>
            Makes the provided integer available for allocation again.
            </summary>
            <param name="reservation">the previously allocated integer to free</param>
        </member>
        <member name="M:RabbitMQ.Client.Util.IntAllocator.nextSetBit">
            <summary>
            Note: this is different than the Java implementation, because we need to
            preserve the prior behavior of always reserving low integers, if available.
            See <c>Test.Integration.AllocateAfterFreeingMany</c>
            </summary>
            <returns>index of the next unallocated bit</returns>
        </member>
    </members>
</doc>
